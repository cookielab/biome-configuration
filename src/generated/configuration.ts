// Generated by ts-to-zod
import { z } from "zod";

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export const schemaSchema = z.string();

export const ruleAssistPlainConfigurationSchema = z.union([z.literal("off"), z.literal("on")]);

export const negatablePredefinedSourceMatcherSchema = z.union([z.literal(":ALIAS:"), z.literal(":BUN:"), z.literal(":NODE:"), z.literal(":PACKAGE:"), z.literal(":PACKAGE_WITH_PROTOCOL:"), z.literal(":PATH:"), z.literal(":URL:"), z.literal("!:ALIAS:"), z.literal("!:BUN:"), z.literal("!:NODE:"), z.literal("!:PACKAGE:"), z.literal("!:PACKAGE_WITH_PROTOCOL:"), z.literal("!:PATH:"), z.literal("!:URL:")]);

export const globSchema = z.string();

export const boolSchema = z.boolean();

/**
 * Normalized Biome glob pattern that strips `./` from the pattern.
 */
export const normalizedGlobSchema = globSchema;

export const indentStyleSchema = z.union([z.literal("tab"), z.literal("space")]);

export const indentWidthSchema = z.number();

export const lineEndingSchema = z.union([z.literal("lf"), z.literal("crlf"), z.literal("cr")]);

/**
 * Validated value for the `line_width` formatter options
 *
 * The allowed range of values is 1..=320
 */
export const lineWidthSchema = z.number();

export const quoteStyleSchema = z.union([z.literal("double"), z.literal("single")]);

export const extendsSchema = z.union([z.array(z.string()), z.string()]);

export const maxSizeSchema = z.number();

export const attributePositionSchema = z.union([z.literal("auto"), z.literal("multiline")]);

/**
 * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
 */
export const bracketSameLineSchema = z.boolean();

export const bracketSpacingSchema = z.boolean();

export const expandSchema = z.union([z.literal("auto"), z.literal("always"), z.literal("never")]);

/**
 * Whether to indent the content of `<script>` and `<style>` tags for HTML-ish templating languages (Vue, Svelte, etc.).
 *
 * When true, the content of `<script>` and `<style>` tags will be indented one level.
 */
export const indentScriptAndStyleSchema = z.boolean();

/**
 * Controls whether void-elements should be self closed
 */
export const selfCloseVoidElementsSchema = z.union([z.literal("never"), z.literal("always")]);

/**
 * Whitespace sensitivity for HTML formatting.
 *
 * The following two cases won't produce the same output:
 *
 * |                |      html      |    output    | | -------------- | :------------: | :----------: | | with spaces    | `1<b> 2 </b>3` | 1<b> 2 </b>3 | | without spaces |  `1<b>2</b>3`  |  1<b>2</b>3  |
 *
 * This happens because whitespace is significant in inline elements.
 *
 * As a consequence of this, the formatter must format blocks that look like this (assume a small line width, <20): ```html <span>really long content</span> ``` as this, where the content hugs the tags: ```html <span >really long content</span > ```
 *
 * Note that this is only necessary for inline elements. Block elements do not have this restriction.
 */
export const whitespaceSensitivitySchema = z.union([z.literal("css"), z.literal("strict"), z.literal("ignore")]);

/**
 * Options that changes how the HTML parser behaves
 */
export const htmlParserConfigurationSchema = z.null();

export const arrowParenthesesSchema = z.union([z.literal("always"), z.literal("asNeeded")]);

export const quotePropertiesSchema = z.union([z.literal("asNeeded"), z.literal("preserve")]);

export const semicolonsSchema = z.union([z.literal("always"), z.literal("asNeeded")]);

/**
 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures.
 */
export const trailingCommasSchema = z.union([z.literal("all"), z.literal("es5"), z.literal("none")]);

/**
 * Indicates the type of runtime or transformation used for interpreting JSX.
 */
export const jsxRuntimeSchema = z.union([z.literal("transparent"), z.literal("reactClassic")]);

export const trailingCommas2Schema = z.union([z.literal("none"), z.literal("all")]);

export const ruleDomainValueSchema = z.union([z.literal("all"), z.literal("none"), z.literal("recommended")]);

export const groupPlainConfigurationSchema = z.union([z.literal("off"), z.literal("on"), z.literal("info"), z.literal("warn"), z.literal("error")]);

export const rulePlainConfigurationSchema = z.union([z.literal("off"), z.literal("on"), z.literal("info"), z.literal("warn"), z.literal("error")]);

/**
 * Used to identify the kind of code action emitted by a rule
 */
export const fixKindSchema = z.union([z.literal("none"), z.literal("safe"), z.literal("unsafe")]);

export const visibilitySchema = z.union([z.literal("public"), z.literal("package"), z.literal("private")]);

export const dependencyAvailabilitySchema = z.union([z.boolean(), z.tuple([z.string()]).rest(z.string())]);

export const stableHookResultSchema = z.union([z.boolean(), z.tuple([z.number()]).rest(z.number())]);

export const objectPropertySyntaxSchema = z.union([z.literal("explicit"), z.literal("shorthand")]);

/**
 * Supported cases.
 */
export const formatSchema = z.union([z.literal("camelCase"), z.literal("CONSTANT_CASE"), z.literal("PascalCase"), z.literal("snake_case")]);

export const formatsSchema = z.array(formatSchema);

export const regexSchema = z.string();

export const kindSchema = z.union([z.union([z.literal("class"), z.literal("enum"), z.literal("interface"), z.literal("enumMember"), z.literal("importNamespace"), z.literal("exportNamespace"), z.literal("variable"), z.literal("const"), z.literal("let"), z.literal("using"), z.literal("var"), z.literal("catchParameter"), z.literal("indexParameter"), z.literal("exportAlias"), z.literal("importAlias"), z.literal("classGetter"), z.literal("classSetter"), z.literal("classMethod"), z.literal("objectLiteralProperty"), z.literal("objectLiteralGetter"), z.literal("objectLiteralSetter"), z.literal("objectLiteralMethod"), z.literal("typeAlias")]), z.literal("any"), z.literal("typeLike"), z.literal("function"), z.literal("namespaceLike"), z.literal("namespace"), z.literal("functionParameter"), z.literal("typeParameter"), z.literal("classMember"), z.literal("classProperty"), z.literal("objectLiteralMember"), z.literal("typeMember"), z.literal("typeGetter"), z.literal("typeProperty"), z.literal("typeSetter"), z.literal("typeMethod")]);

export const restrictedModifierSchema = z.union([z.literal("abstract"), z.literal("private"), z.literal("protected"), z.literal("readonly"), z.literal("static")]);

export const modifiersSchema = z.array(restrictedModifierSchema);

export const scopeSchema = z.union([z.literal("any"), z.literal("global")]);

/**
 * Specifies whether property assignments on function parameters are allowed or denied.
 */
export const propertyAssignmentModeSchema = z.union([z.literal("allow"), z.literal("deny")]);

export const customRestrictedImportOptionsSchema = z.object({
    /**
     * Names of the exported members that allowed to be not be used.
     */
    allowImportNames: z.array(z.string()).optional(),
    /**
     * Names of the exported members that should not be used.
     */
    importNames: z.array(z.string()).optional(),
    /**
     * The message to display when this module is imported.
     */
    message: z.string().optional()
});

export const customRestrictedTypeOptionsSchema = z.object({
    message: z.string().optional(),
    use: z.string().optional().nullable()
});

export const consistentArrayTypeSchema = z.union([z.literal("shorthand"), z.literal("generic")]);

export const accessibilitySchema = z.union([z.literal("noPublic"), z.literal("explicit"), z.literal("none")]);

/**
 * Supported cases for file names.
 */
export const filenameCaseSchema = z.union([z.literal("camelCase"), z.literal("export"), z.literal("kebab-case"), z.literal("PascalCase"), z.literal("snake_case")]);

export const filenameCasesSchema = z.array(filenameCaseSchema);

/**
 * Rule's options.
 */
export const style2Schema = z.union([z.literal("auto"), z.literal("inlineType"), z.literal("separatedType")]);

export const overrideGlobsSchema = z.array(globSchema);

export const pluginConfigurationSchema = z.string();

export const pluginsSchema = z.array(pluginConfigurationSchema);

export const vcsClientKindSchema = z.literal("git");

/**
 * The configuration of the filesystem
 */
export const filesConfigurationSchema = z.object({
    /**
     * Set of file and folder names that should be unconditionally ignored by Biome's scanner.
     *
     * Biome maintains an internal list of default ignore entries, which is based on user feedback and which may change in any release. This setting allows overriding this internal list completely.
     *
     * This is considered an advanced feature that users _should_ not need to tweak themselves, but they can as a last resort. This setting can only be configured in root configurations, and is ignored in nested configs.
     *
     * Entries must be file or folder *names*. Specific paths and globs are not supported.
     *
     * Examples where this may be useful:
     *
     * ```jsonc { "files": { "experimentalScannerIgnores": [ // You almost certainly don't want to scan your `.git` // folder, which is why it's already ignored by default: ".git",
     *
     * // But the scanner does scan `node_modules` by default. If // you *really* don't want this, you can ignore it like // this: "node_modules",
     *
     * // But it's probably better to ignore a specific dependency. // For instance, one that happens to be particularly slow to // scan: "RedisCommander.d.ts", ], } } ```
     *
     * Please be aware that rules relying on the module graph or type inference information may be negatively affected if dependencies of your project aren't (fully) scanned.
     */
    experimentalScannerIgnores: z.array(z.string()).optional().nullable(),
    /**
     * Tells Biome to not emit diagnostics when handling files that doesn't know
     */
    ignoreUnknown: boolSchema.optional().nullable(),
    /**
     * A list of glob patterns. Biome will handle only those files/folders that will match these patterns.
     */
    includes: z.array(normalizedGlobSchema).optional().nullable(),
    /**
     * The maximum allowed size for source code files in bytes. Files above this limit will be ignored for performance reasons. Defaults to 1 MiB
     */
    maxSize: maxSizeSchema.optional().nullable()
});

/**
 * Generic options applied to all files
 */
export const formatterConfigurationSchema = z.object({
    /**
     * The attribute position style in HTML-ish languages. Defaults to auto.
     */
    attributePosition: attributePositionSchema.optional().nullable(),
    /**
     * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
     */
    bracketSameLine: bracketSameLineSchema.optional().nullable(),
    /**
     * Whether to insert spaces around brackets in object literals. Defaults to true.
     */
    bracketSpacing: bracketSpacingSchema.optional().nullable(),
    enabled: boolSchema.optional().nullable(),
    /**
     * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
     */
    expand: expandSchema.optional().nullable(),
    /**
     * Stores whether formatting should be allowed to proceed if a given file has syntax errors
     */
    formatWithErrors: boolSchema.optional().nullable(),
    /**
     * A list of glob patterns. The formatter will include files/folders that will match these patterns.
     */
    includes: z.array(normalizedGlobSchema).optional().nullable(),
    /**
     * The indent style.
     */
    indentStyle: indentStyleSchema.optional().nullable(),
    /**
     * The size of the indentation, 2 by default
     */
    indentWidth: indentWidthSchema.optional().nullable(),
    /**
     * The type of line ending.
     */
    lineEnding: lineEndingSchema.optional().nullable(),
    /**
     * What's the max width of a line. Defaults to 80.
     */
    lineWidth: lineWidthSchema.optional().nullable(),
    /**
     * Use any `.editorconfig` files to configure the formatter. Configuration in `biome.json` will override `.editorconfig` configuration.
     *
     * Default: `true`.
     */
    useEditorconfig: boolSchema.optional().nullable()
});

/**
 * Set of properties to integrate Biome with a VCS software.
 */
export const vcsConfigurationSchema = z.object({
    /**
     * The kind of client.
     */
    clientKind: vcsClientKindSchema.optional().nullable(),
    /**
     * The main branch of the project
     */
    defaultBranch: z.string().optional().nullable(),
    /**
     * Whether Biome should integrate itself with the VCS client
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * The folder where Biome should check for VCS files. By default, Biome will use the same folder where `biome.json` was found.
     *
     * If Biome can't find the configuration, it will attempt to use the current working directory. If no current working directory can't be found, Biome won't use the VCS integration, and a diagnostic will be emitted
     */
    root: z.string().optional().nullable(),
    /**
     * Whether Biome should use the VCS ignore file. When [true], Biome will ignore the files specified in the ignore file.
     */
    useIgnoreFile: boolSchema.optional().nullable()
});

export const useSortedAttributesOptionsSchema = z.object({});

export const useSortedKeysOptionsSchema = z.object({});

export const useSortedPropertiesOptionsSchema = z.object({});

/**
 * Options that changes how the CSS assist behaves
 */
export const cssAssistConfigurationSchema = z.object({
    /**
     * Control the assist for CSS files.
     */
    enabled: boolSchema.optional().nullable()
});

/**
 * Options that changes how the CSS formatter behaves
 */
export const cssFormatterConfigurationSchema = z.object({
    /**
     * Control the formatter for CSS (and its super languages) files.
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * The indent style applied to CSS (and its super languages) files.
     */
    indentStyle: indentStyleSchema.optional().nullable(),
    /**
     * The size of the indentation applied to CSS (and its super languages) files. Default to 2.
     */
    indentWidth: indentWidthSchema.optional().nullable(),
    /**
     * The type of line ending applied to CSS (and its super languages) files.
     */
    lineEnding: lineEndingSchema.optional().nullable(),
    /**
     * What's the max width of a line applied to CSS (and its super languages) files. Defaults to 80.
     */
    lineWidth: lineWidthSchema.optional().nullable(),
    /**
     * The type of quotes used in CSS code. Defaults to double.
     */
    quoteStyle: quoteStyleSchema.optional().nullable()
});

/**
 * Options that changes how the CSS linter behaves
 */
export const cssLinterConfigurationSchema = z.object({
    /**
     * Control the linter for CSS files.
     */
    enabled: boolSchema.optional().nullable()
});

/**
 * Options that changes how the CSS parser behaves
 */
export const cssParserConfigurationSchema = z.object({
    /**
     * Allow comments to appear on incorrect lines in `.css` files
     */
    allowWrongLineComments: boolSchema.optional().nullable(),
    /**
     * Enables parsing of CSS Modules specific features.
     */
    cssModules: boolSchema.optional().nullable()
});

/**
 * Options that changes how the GraphQL linter behaves
 */
export const graphqlAssistConfigurationSchema = z.object({
    /**
     * Control the formatter for GraphQL files.
     */
    enabled: boolSchema.optional().nullable()
});

/**
 * Options that changes how the GraphQL formatter behaves
 */
export const graphqlFormatterConfigurationSchema = z.object({
    /**
     * Whether to insert spaces around brackets in object literals. Defaults to true.
     */
    bracketSpacing: bracketSpacingSchema.optional().nullable(),
    /**
     * Control the formatter for GraphQL files.
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * The indent style applied to GraphQL files.
     */
    indentStyle: indentStyleSchema.optional().nullable(),
    /**
     * The size of the indentation applied to GraphQL files. Default to 2.
     */
    indentWidth: indentWidthSchema.optional().nullable(),
    /**
     * The type of line ending applied to GraphQL files.
     */
    lineEnding: lineEndingSchema.optional().nullable(),
    /**
     * What's the max width of a line applied to GraphQL files. Defaults to 80.
     */
    lineWidth: lineWidthSchema.optional().nullable(),
    /**
     * The type of quotes used in GraphQL code. Defaults to double.
     */
    quoteStyle: quoteStyleSchema.optional().nullable()
});

/**
 * Options that change how the GraphQL linter behaves.
 */
export const graphqlLinterConfigurationSchema = z.object({
    /**
     * Control the formatter for GraphQL files.
     */
    enabled: boolSchema.optional().nullable()
});

export const gritAssistConfigurationSchema = z.object({
    /**
     * Control the assist functionality for Grit files.
     */
    enabled: boolSchema.optional().nullable()
});

export const gritFormatterConfigurationSchema = z.object({
    /**
     * Control the formatter for Grit files.
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * The indent style applied to Grit files.
     */
    indentStyle: indentStyleSchema.optional().nullable(),
    /**
     * The size of the indentation applied to Grit files. Default to 2.
     */
    indentWidth: indentWidthSchema.optional().nullable(),
    /**
     * The type of line ending applied to Grit files.
     */
    lineEnding: lineEndingSchema.optional().nullable(),
    /**
     * What's the max width of a line applied to Grit files. Defaults to 80.
     */
    lineWidth: lineWidthSchema.optional().nullable()
});

export const gritLinterConfigurationSchema = z.object({
    /**
     * Control the linter for Grit files.
     */
    enabled: boolSchema.optional().nullable()
});

/**
 * Options that changes how the HTML formatter behaves
 */
export const htmlFormatterConfigurationSchema = z.object({
    /**
     * The attribute position style in HTML elements. Defaults to auto.
     */
    attributePosition: attributePositionSchema.optional().nullable(),
    /**
     * Whether to hug the closing bracket of multiline HTML tags to the end of the last line, rather than being alone on the following line. Defaults to false.
     */
    bracketSameLine: bracketSameLineSchema.optional().nullable(),
    /**
     * Control the formatter for HTML (and its super languages) files.
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * Whether to indent the `<script>` and `<style>` tags for HTML (and its super languages). Defaults to false.
     */
    indentScriptAndStyle: indentScriptAndStyleSchema.optional().nullable(),
    /**
     * The indent style applied to HTML (and its super languages) files.
     */
    indentStyle: indentStyleSchema.optional().nullable(),
    /**
     * The size of the indentation applied to HTML (and its super languages) files. Default to 2.
     */
    indentWidth: indentWidthSchema.optional().nullable(),
    /**
     * The type of line ending applied to HTML (and its super languages) files.
     */
    lineEnding: lineEndingSchema.optional().nullable(),
    /**
     * What's the max width of a line applied to HTML (and its super languages) files. Defaults to 80.
     */
    lineWidth: lineWidthSchema.optional().nullable(),
    /**
     * Whether void elements should be self-closed. Defaults to never.
     */
    selfCloseVoidElements: selfCloseVoidElementsSchema.optional().nullable(),
    /**
     * Whether to account for whitespace sensitivity when formatting HTML (and its super languages). Defaults to "css".
     */
    whitespaceSensitivity: whitespaceSensitivitySchema.optional().nullable()
});

/**
 * Assist options specific to the JavaScript assist
 */
export const jsAssistConfigurationSchema = z.object({
    /**
     * Control the assist for JavaScript (and its super languages) files.
     */
    enabled: boolSchema.optional().nullable()
});

/**
 * Formatting options specific to the JavaScript files
 */
export const jsFormatterConfigurationSchema = z.object({
    /**
     * Whether to add non-necessary parentheses to arrow functions. Defaults to "always".
     */
    arrowParentheses: arrowParenthesesSchema.optional().nullable(),
    /**
     * The attribute position style in JSX elements. Defaults to auto.
     */
    attributePosition: attributePositionSchema.optional().nullable(),
    /**
     * Whether to hug the closing bracket of multiline HTML/JSX tags to the end of the last line, rather than being alone on the following line. Defaults to false.
     */
    bracketSameLine: bracketSameLineSchema.optional().nullable(),
    /**
     * Whether to insert spaces around brackets in object literals. Defaults to true.
     */
    bracketSpacing: bracketSpacingSchema.optional().nullable(),
    /**
     * Control the formatter for JavaScript (and its super languages) files.
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
     */
    expand: expandSchema.optional().nullable(),
    /**
     * The indent style applied to JavaScript (and its super languages) files.
     */
    indentStyle: indentStyleSchema.optional().nullable(),
    /**
     * The size of the indentation applied to JavaScript (and its super languages) files. Default to 2.
     */
    indentWidth: indentWidthSchema.optional().nullable(),
    /**
     * The type of quotes used in JSX. Defaults to double.
     */
    jsxQuoteStyle: quoteStyleSchema.optional().nullable(),
    /**
     * The type of line ending applied to JavaScript (and its super languages) files.
     */
    lineEnding: lineEndingSchema.optional().nullable(),
    /**
     * What's the max width of a line applied to JavaScript (and its super languages) files. Defaults to 80.
     */
    lineWidth: lineWidthSchema.optional().nullable(),
    /**
     * When properties in objects are quoted. Defaults to asNeeded.
     */
    quoteProperties: quotePropertiesSchema.optional().nullable(),
    /**
     * The type of quotes used in JavaScript code. Defaults to double.
     */
    quoteStyle: quoteStyleSchema.optional().nullable(),
    /**
     * Whether the formatter prints semicolons for all statements or only in for statements where it is necessary because of ASI.
     */
    semicolons: semicolonsSchema.optional().nullable(),
    /**
     * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "all".
     */
    trailingCommas: trailingCommasSchema.optional().nullable()
});

/**
 * Linter options specific to the JavaScript linter
 */
export const jsLinterConfigurationSchema = z.object({
    /**
     * Control the linter for JavaScript (and its super languages) files.
     */
    enabled: boolSchema.optional().nullable()
});

/**
 * Options that changes how the JavaScript parser behaves
 */
export const jsParserConfigurationSchema = z.object({
    /**
     * Enables parsing of Grit metavariables. Defaults to `false`.
     */
    gritMetavariables: boolSchema.optional().nullable(),
    /**
     * When enabled, files like `.js`/`.mjs`/`.cjs` may contain JSX syntax.
     *
     * Defaults to `true`.
     */
    jsxEverywhere: boolSchema.optional().nullable(),
    /**
     * It enables the experimental and unsafe parsing of parameter decorators
     *
     * These decorators belong to an old proposal, and they are subject to change.
     */
    unsafeParameterDecoratorsEnabled: boolSchema.optional().nullable()
});

/**
 * Linter options specific to the JSON linter
 */
export const jsonAssistConfigurationSchema = z.object({
    /**
     * Control the assist for JSON (and its super languages) files.
     */
    enabled: boolSchema.optional().nullable()
});

export const jsonFormatterConfigurationSchema = z.object({
    /**
     * Whether to insert spaces around brackets in object literals. Defaults to true.
     */
    bracketSpacing: bracketSpacingSchema.optional().nullable(),
    /**
     * Control the formatter for JSON (and its super languages) files.
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
     */
    expand: expandSchema.optional().nullable(),
    /**
     * The indent style applied to JSON (and its super languages) files.
     */
    indentStyle: indentStyleSchema.optional().nullable(),
    /**
     * The size of the indentation applied to JSON (and its super languages) files. Default to 2.
     */
    indentWidth: indentWidthSchema.optional().nullable(),
    /**
     * The type of line ending applied to JSON (and its super languages) files.
     */
    lineEnding: lineEndingSchema.optional().nullable(),
    /**
     * What's the max width of a line applied to JSON (and its super languages) files. Defaults to 80.
     */
    lineWidth: lineWidthSchema.optional().nullable(),
    /**
     * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "none".
     */
    trailingCommas: trailingCommas2Schema.optional().nullable()
});

/**
 * Linter options specific to the JSON linter
 */
export const jsonLinterConfigurationSchema = z.object({
    /**
     * Control the linter for JSON (and its super languages) files.
     */
    enabled: boolSchema.optional().nullable()
});

/**
 * Options that changes how the JSON parser behaves
 */
export const jsonParserConfigurationSchema = z.object({
    /**
     * Allow parsing comments in `.json` files
     */
    allowComments: boolSchema.optional().nullable(),
    /**
     * Allow parsing trailing commas in `.json` files
     */
    allowTrailingCommas: boolSchema.optional().nullable()
});

export const ruleDomainsSchema = z.record(z.string(), ruleDomainValueSchema);

export const noAccessKeyOptionsSchema = z.object({});

export const noAriaHiddenOnFocusableOptionsSchema = z.object({});

export const noAriaUnsupportedElementsOptionsSchema = z.object({});

export const noAutofocusOptionsSchema = z.object({});

export const noDistractingElementsOptionsSchema = z.object({});

export const noHeaderScopeOptionsSchema = z.object({});

export const noInteractiveElementToNoninteractiveRoleOptionsSchema = z.object({});

export const noLabelWithoutControlOptionsSchema = z.object({
    /**
     * Array of component names that should be considered the same as an `input` element.
     */
    inputComponents: z.array(z.string()).optional(),
    /**
     * Array of attributes that should be treated as the `label` accessible text content.
     */
    labelAttributes: z.array(z.string()).optional(),
    /**
     * Array of component names that should be considered the same as a `label` element.
     */
    labelComponents: z.array(z.string()).optional()
});

export const noNoninteractiveElementToInteractiveRoleOptionsSchema = z.object({});

export const noNoninteractiveTabindexOptionsSchema = z.object({});

export const noPositiveTabindexOptionsSchema = z.object({});

export const noRedundantAltOptionsSchema = z.object({});

export const noRedundantRolesOptionsSchema = z.object({});

export const noStaticElementInteractionsOptionsSchema = z.object({});

export const noSvgWithoutTitleOptionsSchema = z.object({});

export const useAltTextOptionsSchema = z.object({});

export const useAnchorContentOptionsSchema = z.object({});

export const useAriaActivedescendantWithTabindexOptionsSchema = z.object({});

export const useAriaPropsForRoleOptionsSchema = z.object({});

export const useAriaPropsSupportedByRoleOptionsSchema = z.object({});

export const useButtonTypeOptionsSchema = z.object({});

export const useFocusableInteractiveOptionsSchema = z.object({});

export const useGenericFontNamesOptionsSchema = z.object({});

export const useHeadingContentOptionsSchema = z.object({});

export const useHtmlLangOptionsSchema = z.object({});

export const useIframeTitleOptionsSchema = z.object({});

export const useKeyWithClickEventsOptionsSchema = z.object({});

export const useKeyWithMouseEventsOptionsSchema = z.object({});

export const useMediaCaptionOptionsSchema = z.object({});

export const useSemanticElementsOptionsSchema = z.object({});

export const useValidAnchorOptionsSchema = z.object({});

export const useValidAriaPropsOptionsSchema = z.object({});

export const useValidAriaRoleOptionsSchema = z.object({
    /**
     * It allows specifying a list of roles that might be invalid otherwise
     */
    allowInvalidRoles: z.array(z.string()).optional(),
    /**
     * Use this option to ignore non-DOM elements, such as custom components
     */
    ignoreNonDom: z.boolean().optional()
});

export const useValidAriaValuesOptionsSchema = z.object({});

export const useValidAutocompleteOptionsSchema = z.object({
    /**
     * `input` like custom components that should be checked.
     */
    inputComponents: z.array(z.string()).optional()
});

export const useValidLangOptionsSchema = z.object({});

export const noAdjacentSpacesInRegexOptionsSchema = z.object({});

export const noArgumentsOptionsSchema = z.object({});

export const noBannedTypesOptionsSchema = z.object({});

export const noCommaOperatorOptionsSchema = z.object({});

export const noEmptyTypeParametersOptionsSchema = z.object({});

export const noExcessiveCognitiveComplexityOptionsSchema = z.object({
    /**
     * The maximum complexity score that we allow. Anything higher is considered excessive.
     */
    maxAllowedComplexity: z.number().optional()
});

export const noExcessiveNestedTestSuitesOptionsSchema = z.object({});

export const noExtraBooleanCastOptionsSchema = z.object({});

export const noFlatMapIdentityOptionsSchema = z.object({});

export const noForEachOptionsSchema = z.object({
    /**
     * A list of variable names allowed for `forEach` calls.
     */
    allowedIdentifiers: z.array(z.string()).optional()
});

export const noStaticOnlyClassOptionsSchema = z.object({});

export const noThisInStaticOptionsSchema = z.object({});

export const noUselessCatchOptionsSchema = z.object({});

export const noUselessConstructorOptionsSchema = z.object({});

export const noUselessContinueOptionsSchema = z.object({});

export const noUselessEmptyExportOptionsSchema = z.object({});

export const noUselessEscapeInRegexOptionsSchema = z.object({});

export const noUselessFragmentsOptionsSchema = z.object({});

export const noUselessLabelOptionsSchema = z.object({});

export const noUselessLoneBlockStatementsOptionsSchema = z.object({});

export const noUselessRenameOptionsSchema = z.object({});

export const noUselessStringConcatOptionsSchema = z.object({});

export const noUselessStringRawOptionsSchema = z.object({});

export const noUselessSwitchCaseOptionsSchema = z.object({});

export const noUselessTernaryOptionsSchema = z.object({});

export const noUselessThisAliasOptionsSchema = z.object({});

export const noUselessTypeConstraintOptionsSchema = z.object({});

export const noUselessUndefinedInitializationOptionsSchema = z.object({});

export const noVoidOptionsSchema = z.object({});

export const useArrowFunctionOptionsSchema = z.object({});

export const useDateNowOptionsSchema = z.object({});

export const useFlatMapOptionsSchema = z.object({});

export const useLiteralKeysOptionsSchema = z.object({});

export const useNumericLiteralsOptionsSchema = z.object({});

export const useOptionalChainOptionsSchema = z.object({});

export const useRegexLiteralsOptionsSchema = z.object({});

export const useSimpleNumberKeysOptionsSchema = z.object({});

export const useSimplifiedLogicExpressionOptionsSchema = z.object({});

export const useWhileOptionsSchema = z.object({});

export const noChildrenPropOptionsSchema = z.object({});

export const noConstAssignOptionsSchema = z.object({});

export const noConstantConditionOptionsSchema = z.object({});

export const noConstantMathMinMaxClampOptionsSchema = z.object({});

export const noConstructorReturnOptionsSchema = z.object({});

export const noEmptyCharacterClassInRegexOptionsSchema = z.object({});

export const noEmptyPatternOptionsSchema = z.object({});

export const noGlobalObjectCallsOptionsSchema = z.object({});

export const noInnerDeclarationsOptionsSchema = z.object({});

export const noInvalidBuiltinInstantiationOptionsSchema = z.object({});

export const noInvalidConstructorSuperOptionsSchema = z.object({});

export const noInvalidDirectionInLinearGradientOptionsSchema = z.object({});

export const noInvalidGridAreasOptionsSchema = z.object({});

export const noInvalidPositionAtImportRuleOptionsSchema = z.object({});

export const noInvalidUseBeforeDeclarationOptionsSchema = z.object({});

export const noMissingVarFunctionOptionsSchema = z.object({});

export const noNodejsModulesOptionsSchema = z.object({});

export const noNonoctalDecimalEscapeOptionsSchema = z.object({});

export const noPrecisionLossOptionsSchema = z.object({});

export const noPrivateImportsOptionsSchema = z.object({
    /**
     * The default visibility to assume for symbols without visibility tag.
     *
     * Default: **public**.
     */
    defaultVisibility: visibilitySchema.and(z.string()).optional()
});

export const noRenderReturnValueOptionsSchema = z.object({});

export const noSelfAssignOptionsSchema = z.object({});

export const noSetterReturnOptionsSchema = z.object({});

export const noStringCaseMismatchOptionsSchema = z.object({});

export const noSwitchDeclarationsOptionsSchema = z.object({});

export const noUndeclaredDependenciesOptionsSchema = z.object({
    /**
     * If set to `false`, then the rule will show an error when `devDependencies` are imported. Defaults to `true`.
     */
    devDependencies: dependencyAvailabilitySchema.and(z.boolean()).optional(),
    /**
     * If set to `false`, then the rule will show an error when `optionalDependencies` are imported. Defaults to `true`.
     */
    optionalDependencies: dependencyAvailabilitySchema.and(z.boolean()).optional(),
    /**
     * If set to `false`, then the rule will show an error when `peerDependencies` are imported. Defaults to `true`.
     */
    peerDependencies: dependencyAvailabilitySchema.and(z.boolean()).optional()
});

export const noUndeclaredVariablesOptionsSchema = z.object({
    /**
     * Check undeclared types.
     */
    checkTypes: z.boolean().optional()
});

export const noUnknownFunctionOptionsSchema = z.object({});

export const noUnknownMediaFeatureNameOptionsSchema = z.object({});

export const noUnknownPropertyOptionsSchema = z.object({});

export const noUnknownPseudoClassOptionsSchema = z.object({});

export const noUnknownPseudoElementOptionsSchema = z.object({});

export const noUnknownTypeSelectorOptionsSchema = z.object({});

export const noUnknownUnitOptionsSchema = z.object({});

export const noUnmatchableAnbSelectorOptionsSchema = z.object({});

export const noUnreachableOptionsSchema = z.object({});

export const noUnreachableSuperOptionsSchema = z.object({});

export const noUnsafeFinallyOptionsSchema = z.object({});

export const noUnsafeOptionalChainingOptionsSchema = z.object({});

export const noUnusedFunctionParametersOptionsSchema = z.object({
    /**
     * Whether to ignore unused variables from an object destructuring with a spread.
     */
    ignoreRestSiblings: z.boolean().optional()
});

export const noUnusedImportsOptionsSchema = z.object({});

export const noUnusedLabelsOptionsSchema = z.object({});

export const noUnusedPrivateClassMembersOptionsSchema = z.object({});

export const noUnusedVariablesOptionsSchema = z.object({
    /**
     * Whether to ignore unused variables from an object destructuring with a spread.
     */
    ignoreRestSiblings: z.boolean().optional()
});

export const noVoidElementsWithChildrenOptionsSchema = z.object({});

export const noVoidTypeReturnOptionsSchema = z.object({});

export const hookSchema = z.object({
    /**
     * The "position" of the closure function, starting from zero.
     *
     * For example, for React's `useEffect()` hook, the closure index is 0.
     */
    closureIndex: z.number().optional().nullable(),
    /**
     * The "position" of the array of dependencies, starting from zero.
     *
     * For example, for React's `useEffect()` hook, the dependencies index is 1.
     */
    dependenciesIndex: z.number().optional().nullable(),
    /**
     * The name of the hook.
     */
    name: z.string().optional(),
    /**
     * Whether the result of the hook is stable.
     *
     * Set to `true` to mark the identity of the hook's return value as stable, or use a number/an array of numbers to mark the "positions" in the return array as stable.
     *
     * For example, for React's `useRef()` hook the value would be `true`, while for `useState()` it would be `[1]`.
     */
    stableResult: stableHookResultSchema.optional().nullable()
});

export const useHookAtTopLevelOptionsSchema = z.object({});

export const useImportExtensionsOptionsSchema = z.object({
    /**
     * If `true`, the suggested extension is always `.js` regardless of what extension the source file has in your project.
     */
    forceJsExtensions: z.boolean().optional()
});

export const useIsNanOptionsSchema = z.object({});

export const useJsxKeyInIterableOptionsSchema = z.object({
    /**
     * Set to `true` to check shorthand fragments (`<></>`)
     */
    checkShorthandFragments: z.boolean().optional()
});

export const useValidForDirectionOptionsSchema = z.object({});

export const useValidTypeofOptionsSchema = z.object({});

export const useYieldOptionsSchema = z.object({});

export const noAwaitInLoopOptionsSchema = z.object({});

export const noBitwiseOperatorsOptionsSchema = z.object({
    /**
     * Allows a list of bitwise operators to be used as exceptions.
     */
    allow: z.array(z.string()).optional()
});

export const noConstantBinaryExpressionOptionsSchema = z.object({});

export const noDestructuredPropsOptionsSchema = z.object({});

export const noExcessiveLinesPerFunctionOptionsSchema = z.object({
    /**
     * The maximum number of lines allowed in a function body.
     */
    maxLines: z.number().optional(),
    /**
     * When this options is set to `true`, blank lines in the function body are not counted towards the maximum line limit.
     */
    skipBlankLines: z.boolean().optional(),
    /**
     * When this option is set to `true`, Immediately Invoked Function Expressions (IIFEs) are not checked for the maximum line limit.
     */
    skipIifes: z.boolean().optional()
});

export const noFloatingPromisesOptionsSchema = z.object({});

export const noGlobalDirnameFilenameOptionsSchema = z.object({});

export const noImplicitCoercionOptionsSchema = z.object({});

export const noImportCyclesOptionsSchema = z.object({});

export const noImportantStylesOptionsSchema = z.object({});

export const noMagicNumbersOptionsSchema = z.object({});

export const noMisusedPromisesOptionsSchema = z.object({});

export const noNestedComponentDefinitionsOptionsSchema = z.object({});

export const noNoninteractiveElementInteractionsOptionsSchema = z.object({});

export const noProcessGlobalOptionsSchema = z.object({});

export const noReactPropAssignOptionsSchema = z.object({});

export const customRestrictedElementsSchema = z.record(z.string(), z.string());

export const noSecretsOptionsSchema = z.object({
    /**
     * Set entropy threshold (default is 41).
     */
    entropyThreshold: z.number().optional().nullable()
});

export const noShadowOptionsSchema = z.object({});

export const noTsIgnoreOptionsSchema = z.object({});

export const noUnassignedVariablesOptionsSchema = z.object({});

export const noUnknownAtRuleOptionsSchema = z.object({});

export const noUnresolvedImportsOptionsSchema = z.object({});

export const noUnwantedPolyfillioOptionsSchema = z.object({});

export const noUselessBackrefInRegexOptionsSchema = z.object({});

export const noUselessEscapeInStringOptionsSchema = z.object({});

export const noUselessUndefinedOptionsSchema = z.object({});

export const useAdjacentGetterSetterOptionsSchema = z.object({});

export const useConsistentObjectDefinitionOptionsSchema = z.object({
    /**
     * The preferred syntax to enforce.
     */
    syntax: objectPropertySyntaxSchema.and(z.string()).optional()
});

export const useConsistentResponseOptionsSchema = z.object({});

export const useExhaustiveSwitchCasesOptionsSchema = z.object({});

export const useExplicitTypeOptionsSchema = z.object({});

export const useExportsLastOptionsSchema = z.object({});

export const useForComponentOptionsSchema = z.object({});

export const useGoogleFontPreconnectOptionsSchema = z.object({});

export const useIndexOfOptionsSchema = z.object({});

export const useIterableCallbackReturnOptionsSchema = z.object({});

export const useJsonImportAttributeOptionsSchema = z.object({});

export const useNamedOperationOptionsSchema = z.object({});

export const selectorSchema = z.object({
    /**
     * Declaration kind
     */
    kind: kindSchema.optional(),
    /**
     * Modifiers used on the declaration
     */
    modifiers: modifiersSchema.optional(),
    /**
     * Scope of the declaration
     */
    scope: scopeSchema.optional()
});

export const useNumericSeparatorsOptionsSchema = z.object({});

export const useObjectSpreadOptionsSchema = z.object({});

export const useParseIntRadixOptionsSchema = z.object({});

export const useReadonlyClassPropertiesOptionsSchema = z.object({
    /**
     * When `true`, the keywords `public`, `protected`, and `private` are analyzed by the rule.
     */
    checkAllProperties: z.boolean().optional()
});

export const useSingleJsDocAsteriskOptionsSchema = z.object({});

export const useSortedClassesOptionsSchema = z.object({
    /**
     * Additional attributes that will be sorted.
     */
    attributes: z.array(z.string()).optional().nullable(),
    /**
     * Names of the functions or tagged templates that will be sorted.
     */
    functions: z.array(z.string()).optional().nullable()
});

export const useSymbolDescriptionOptionsSchema = z.object({});

export const useUnifiedTypeSignatureOptionsSchema = z.object({});

export const useUniqueElementIdsOptionsSchema = z.object({});

export const noAccumulatingSpreadOptionsSchema = z.object({});

export const noBarrelFileOptionsSchema = z.object({});

export const noDeleteOptionsSchema = z.object({});

export const noDynamicNamespaceImportAccessOptionsSchema = z.object({});

export const noImgElementOptionsSchema = z.object({});

export const noNamespaceImportOptionsSchema = z.object({});

export const noReExportAllOptionsSchema = z.object({});

export const useTopLevelRegexOptionsSchema = z.object({});

export const noBlankTargetOptionsSchema = z.object({
    /**
     * List of domains where `target="_blank"` is allowed without `rel="noopener"`.
     */
    allowDomains: z.array(z.string()).optional(),
    /**
     * Whether `noreferrer` is allowed in addition to `noopener`.
     */
    allowNoReferrer: z.boolean().optional()
});

export const noDangerouslySetInnerHtmlOptionsSchema = z.object({});

export const noDangerouslySetInnerHtmlWithChildrenOptionsSchema = z.object({});

export const noGlobalEvalOptionsSchema = z.object({});

export const noCommonJsOptionsSchema = z.object({});

export const noDefaultExportOptionsSchema = z.object({});

export const noDescendingSpecificityOptionsSchema = z.object({});

export const noDoneCallbackOptionsSchema = z.object({});

export const noEnumOptionsSchema = z.object({});

export const noExportedImportsOptionsSchema = z.object({});

export const noHeadElementOptionsSchema = z.object({});

export const noImplicitBooleanOptionsSchema = z.object({});

export const noInferrableTypesOptionsSchema = z.object({});

export const noNamespaceOptionsSchema = z.object({});

export const noNegationElseOptionsSchema = z.object({});

export const noNestedTernaryOptionsSchema = z.object({});

export const noNonNullAssertionOptionsSchema = z.object({});

export const noParameterAssignOptionsSchema = z.object({
    /**
     * Whether to report an error when a dependency is listed in the dependencies array but isn't used. Defaults to `allow`.
     */
    propertyAssignment: propertyAssignmentModeSchema.and(z.string()).optional()
});

export const noParameterPropertiesOptionsSchema = z.object({});

export const noProcessEnvOptionsSchema = z.object({});

export const noRestrictedGlobalsOptionsSchema = z.object({
    /**
     * A list of names that should trigger the rule
     */
    deniedGlobals: z.record(z.string(), z.string()).optional()
});

export const customRestrictedImportSchema = z.union([z.string(), customRestrictedImportOptionsSchema]);

export const customRestrictedTypeSchema = z.union([z.string(), customRestrictedTypeOptionsSchema]);

export const noShoutyConstantsOptionsSchema = z.object({});

export const noSubstrOptionsSchema = z.object({});

export const noUnusedTemplateLiteralOptionsSchema = z.object({});

export const noUselessElseOptionsSchema = z.object({});

export const noValueAtRuleOptionsSchema = z.object({});

export const noYodaExpressionOptionsSchema = z.object({});

export const useArrayLiteralsOptionsSchema = z.object({});

export const useAsConstAssertionOptionsSchema = z.object({});

export const useAtIndexOptionsSchema = z.object({});

export const useBlockStatementsOptionsSchema = z.object({});

export const useCollapsedElseIfOptionsSchema = z.object({});

export const useCollapsedIfOptionsSchema = z.object({});

export const useComponentExportOnlyModulesOptionsSchema = z.object({
    /**
     * Allows the export of constants. This option is for environments that support it, such as [Vite](https://vitejs.dev/)
     */
    allowConstantExport: z.boolean().optional(),
    /**
     * A list of names that can be additionally exported from the module This option is for exports that do not hinder [React Fast Refresh](https://github.com/facebook/react/tree/main/packages/react-refresh), such as [`meta` in Remix](https://remix.run/docs/en/main/route/meta)
     */
    allowExportNames: z.array(z.string()).optional()
});

export const useConsistentArrayTypeOptionsSchema = z.object({
    syntax: consistentArrayTypeSchema.and(z.string()).optional()
});

export const useConsistentBuiltinInstantiationOptionsSchema = z.object({});

export const useConsistentCurlyBracesOptionsSchema = z.object({});

export const useConsistentMemberAccessibilityOptionsSchema = z.object({
    /**
     * The kind of accessibility you want to enforce. Default to "noPublic"
     */
    accessibility: accessibilitySchema.and(z.string()).optional()
});

export const useConstOptionsSchema = z.object({});

export const useDefaultParameterLastOptionsSchema = z.object({});

export const useDefaultSwitchClauseOptionsSchema = z.object({});

export const useDeprecatedReasonOptionsSchema = z.object({});

export const useEnumInitializersOptionsSchema = z.object({});

export const useExplicitLengthCheckOptionsSchema = z.object({});

export const useExponentiationOperatorOptionsSchema = z.object({});

export const useExportTypeOptionsSchema = z.object({});

export const useFilenamingConventionOptionsSchema = z.object({
    /**
     * Allowed cases for file names.
     */
    filenameCases: filenameCasesSchema.optional(),
    /**
     * Regular expression to enforce
     */
    match: regexSchema.optional().nullable(),
    /**
     * If `false`, then non-ASCII characters are allowed.
     */
    requireAscii: z.boolean().optional(),
    /**
     * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
     */
    strictCase: z.boolean().optional()
});

export const useForOfOptionsSchema = z.object({});

export const useFragmentSyntaxOptionsSchema = z.object({});

export const useImportTypeOptionsSchema = z.object({
    /**
     * The style to apply when import types. Default to "auto"
     */
    style: style2Schema.and(z.string()).optional()
});

export const useLiteralEnumMembersOptionsSchema = z.object({});

export const useNodeAssertStrictOptionsSchema = z.object({});

export const useNodejsImportProtocolOptionsSchema = z.object({});

export const useNumberNamespaceOptionsSchema = z.object({});

export const useSelfClosingElementsOptionsSchema = z.object({
    ignoreHtmlElements: z.boolean().optional()
});

export const useShorthandAssignOptionsSchema = z.object({});

export const useShorthandFunctionTypeOptionsSchema = z.object({});

export const useSingleVarDeclaratorOptionsSchema = z.object({});

export const useTemplateOptionsSchema = z.object({});

export const useThrowNewErrorOptionsSchema = z.object({});

export const useThrowOnlyErrorOptionsSchema = z.object({});

export const useTrimStartEndOptionsSchema = z.object({});

export const noAlertOptionsSchema = z.object({});

export const noApproximativeNumericConstantOptionsSchema = z.object({});

export const noArrayIndexKeyOptionsSchema = z.object({});

export const noAssignInExpressionsOptionsSchema = z.object({});

export const noAsyncPromiseExecutorOptionsSchema = z.object({});

export const noCatchAssignOptionsSchema = z.object({});

export const noClassAssignOptionsSchema = z.object({});

export const noCommentTextOptionsSchema = z.object({});

export const noCompareNegZeroOptionsSchema = z.object({});

export const noConfusingLabelsOptionsSchema = z.object({
    /**
     * A list of (non-confusing) labels that should be allowed
     */
    allowedLabels: z.array(z.string()).optional()
});

export const noConfusingVoidTypeOptionsSchema = z.object({});

export const noConsoleOptionsSchema = z.object({
    /**
     * Allowed calls on the console object.
     */
    allow: z.array(z.string()).optional()
});

export const noConstEnumOptionsSchema = z.object({});

export const noControlCharactersInRegexOptionsSchema = z.object({});

export const noDebuggerOptionsSchema = z.object({});

export const noDocumentCookieOptionsSchema = z.object({});

export const noDocumentImportInPageOptionsSchema = z.object({});

export const noDoubleEqualsOptionsSchema = z.object({
    /**
     * If `true`, an exception is made when comparing with `null`, as it's often relied on to check both for `null` or `undefined`.
     *
     * If `false`, no such exception will be made.
     */
    ignoreNull: z.boolean().optional()
});

export const noDuplicateAtImportRulesOptionsSchema = z.object({});

export const noDuplicateCaseOptionsSchema = z.object({});

export const noDuplicateClassMembersOptionsSchema = z.object({});

export const noDuplicateCustomPropertiesOptionsSchema = z.object({});

export const noDuplicateElseIfOptionsSchema = z.object({});

export const noDuplicateFieldsOptionsSchema = z.object({});

export const noDuplicateFontNamesOptionsSchema = z.object({});

export const noDuplicateJsxPropsOptionsSchema = z.object({});

export const noDuplicateObjectKeysOptionsSchema = z.object({});

export const noDuplicateParametersOptionsSchema = z.object({});

export const noDuplicatePropertiesOptionsSchema = z.object({});

export const noDuplicateSelectorsKeyframeBlockOptionsSchema = z.object({});

export const noDuplicateTestHooksOptionsSchema = z.object({});

export const noEmptyBlockOptionsSchema = z.object({});

export const noEmptyBlockStatementsOptionsSchema = z.object({});

export const noEmptyInterfaceOptionsSchema = z.object({});

export const noEvolvingTypesOptionsSchema = z.object({});

export const noExplicitAnyOptionsSchema = z.object({});

export const noExportsInTestOptionsSchema = z.object({});

export const noExtraNonNullAssertionOptionsSchema = z.object({});

export const noFallthroughSwitchClauseOptionsSchema = z.object({});

export const noFocusedTestsOptionsSchema = z.object({});

export const noFunctionAssignOptionsSchema = z.object({});

export const noGlobalAssignOptionsSchema = z.object({});

export const noGlobalIsFiniteOptionsSchema = z.object({});

export const noGlobalIsNanOptionsSchema = z.object({});

export const noHeadImportInDocumentOptionsSchema = z.object({});

export const noImplicitAnyLetOptionsSchema = z.object({});

export const noImportAssignOptionsSchema = z.object({});

export const noImportantInKeyframeOptionsSchema = z.object({});

export const noIrregularWhitespaceOptionsSchema = z.object({});

export const noLabelVarOptionsSchema = z.object({});

export const noMisleadingCharacterClassOptionsSchema = z.object({});

export const noMisleadingInstantiatorOptionsSchema = z.object({});

export const noMisplacedAssertionOptionsSchema = z.object({});

export const noMisrefactoredShorthandAssignOptionsSchema = z.object({});

export const noOctalEscapeOptionsSchema = z.object({});

export const noPrototypeBuiltinsOptionsSchema = z.object({});

export const noReactSpecificPropsOptionsSchema = z.object({});

export const noRedeclareOptionsSchema = z.object({});

export const noRedundantUseStrictOptionsSchema = z.object({});

export const noSelfCompareOptionsSchema = z.object({});

export const noShadowRestrictedNamesOptionsSchema = z.object({});

export const noShorthandPropertyOverridesOptionsSchema = z.object({});

export const noSkippedTestsOptionsSchema = z.object({});

export const noSparseArrayOptionsSchema = z.object({});

export const noSuspiciousSemicolonInJsxOptionsSchema = z.object({});

export const noTemplateCurlyInStringOptionsSchema = z.object({});

export const noThenPropertyOptionsSchema = z.object({});

export const noUnsafeDeclarationMergingOptionsSchema = z.object({});

export const noUnsafeNegationOptionsSchema = z.object({});

export const noVarOptionsSchema = z.object({});

export const noWithOptionsSchema = z.object({});

export const useAdjacentOverloadSignaturesOptionsSchema = z.object({});

export const useAwaitOptionsSchema = z.object({});

export const useDefaultSwitchClauseLastOptionsSchema = z.object({});

export const useErrorMessageOptionsSchema = z.object({});

export const useGetterReturnOptionsSchema = z.object({});

export const useGoogleFontDisplayOptionsSchema = z.object({});

export const useGuardForInOptionsSchema = z.object({});

export const useIsArrayOptionsSchema = z.object({});

export const useNamespaceKeywordOptionsSchema = z.object({});

export const useNumberToFixedDigitsArgumentOptionsSchema = z.object({});

export const useStrictModeOptionsSchema = z.object({});

/**
 * Options applied to CSS files
 */
export const cssConfigurationSchema = z.object({
    /**
     * CSS assist options
     */
    assist: cssAssistConfigurationSchema.optional().nullable(),
    /**
     * CSS formatter options
     */
    formatter: cssFormatterConfigurationSchema.optional().nullable(),
    /**
     * CSS globals
     */
    globals: z.array(z.string()).optional().nullable(),
    /**
     * CSS linter options
     */
    linter: cssLinterConfigurationSchema.optional().nullable(),
    /**
     * CSS parsing options
     */
    parser: cssParserConfigurationSchema.optional().nullable()
});

export const overrideFilesConfigurationSchema = z.object({
    /**
     * File size limit in bytes
     */
    maxSize: maxSizeSchema.optional().nullable()
});

export const overrideFormatterConfigurationSchema = z.object({
    /**
     * The attribute position style.
     */
    attributePosition: attributePositionSchema.optional().nullable(),
    /**
     * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
     */
    bracketSameLine: bracketSameLineSchema.optional().nullable(),
    /**
     * Whether to insert spaces around brackets in object literals. Defaults to true.
     */
    bracketSpacing: bracketSpacingSchema.optional().nullable(),
    enabled: boolSchema.optional().nullable(),
    /**
     * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
     */
    expand: expandSchema.optional().nullable(),
    /**
     * Stores whether formatting should be allowed to proceed if a given file has syntax errors
     */
    formatWithErrors: boolSchema.optional().nullable(),
    /**
     * The size of the indentation, 2 by default (deprecated, use `indent-width`)
     */
    indentSize: indentWidthSchema.optional().nullable(),
    /**
     * The indent style.
     */
    indentStyle: indentStyleSchema.optional().nullable(),
    /**
     * The size of the indentation, 2 by default
     */
    indentWidth: indentWidthSchema.optional().nullable(),
    /**
     * The type of line ending.
     */
    lineEnding: lineEndingSchema.optional().nullable(),
    /**
     * What's the max width of a line. Defaults to 80.
     */
    lineWidth: lineWidthSchema.optional().nullable()
});

/**
 * Options applied to GraphQL files
 */
export const graphqlConfigurationSchema = z.object({
    /**
     * Assist options
     */
    assist: graphqlAssistConfigurationSchema.optional().nullable(),
    /**
     * GraphQL formatter options
     */
    formatter: graphqlFormatterConfigurationSchema.optional().nullable(),
    linter: graphqlLinterConfigurationSchema.optional().nullable()
});

/**
 * Options applied to GritQL files
 */
export const gritConfigurationSchema = z.object({
    /**
     * Assist options
     */
    assist: gritAssistConfigurationSchema.optional().nullable(),
    /**
     * Formatting options
     */
    formatter: gritFormatterConfigurationSchema.optional().nullable(),
    /**
     * Formatting options
     */
    linter: gritLinterConfigurationSchema.optional().nullable()
});

/**
 * Options applied to HTML files
 */
export const htmlConfigurationSchema = z.object({
    /**
     * HTML formatter options
     */
    formatter: htmlFormatterConfigurationSchema.optional().nullable(),
    /**
     * HTML parsing options
     */
    parser: htmlParserConfigurationSchema.optional()
});

/**
 * A set of options applied to the JavaScript files
 */
export const jsConfigurationSchema = z.object({
    /**
     * Assist options
     */
    assist: jsAssistConfigurationSchema.optional().nullable(),
    /**
     * Formatting options
     */
    formatter: jsFormatterConfigurationSchema.optional().nullable(),
    /**
     * A list of global bindings that should be ignored by the analyzers
     *
     * If defined here, they should not emit diagnostics.
     */
    globals: z.array(z.string()).optional().nullable(),
    /**
     * Indicates the type of runtime or transformation used for interpreting JSX.
     */
    jsxRuntime: jsxRuntimeSchema.optional().nullable(),
    /**
     * Linter options
     */
    linter: jsLinterConfigurationSchema.optional().nullable(),
    /**
     * Parsing options
     */
    parser: jsParserConfigurationSchema.optional().nullable()
});

/**
 * Options applied to JSON files
 */
export const jsonConfigurationSchema = z.object({
    /**
     * Assist options
     */
    assist: jsonAssistConfigurationSchema.optional().nullable(),
    /**
     * Formatting options
     */
    formatter: jsonFormatterConfigurationSchema.optional().nullable(),
    /**
     * Linting options
     */
    linter: jsonLinterConfigurationSchema.optional().nullable(),
    /**
     * Parsing options
     */
    parser: jsonParserConfigurationSchema.optional().nullable()
});

/**
 * Glob to match against import sources.
 */
export const importSourceGlobSchema = globSchema;

export const ruleAssistWithOptionsForUseSortedAttributesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: ruleAssistPlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSortedAttributesOptionsSchema
});

export const ruleAssistWithOptionsForUseSortedKeysOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: ruleAssistPlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSortedKeysOptionsSchema
});

export const ruleAssistWithOptionsForUseSortedPropertiesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: ruleAssistPlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSortedPropertiesOptionsSchema
});

export const ruleWithNoAccessKeyOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAccessKeyOptionsSchema.optional()
});

export const ruleWithNoAriaHiddenOnFocusableOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAriaHiddenOnFocusableOptionsSchema.optional()
});

export const ruleWithNoAriaUnsupportedElementsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAriaUnsupportedElementsOptionsSchema.optional()
});

export const ruleWithNoAutofocusOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAutofocusOptionsSchema.optional()
});

export const ruleWithNoDistractingElementsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDistractingElementsOptionsSchema.optional()
});

export const ruleWithNoHeaderScopeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noHeaderScopeOptionsSchema.optional()
});

export const ruleWithNoInteractiveElementToNoninteractiveRoleOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInteractiveElementToNoninteractiveRoleOptionsSchema.optional()
});

export const ruleWithNoLabelWithoutControlOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noLabelWithoutControlOptionsSchema.optional()
});

export const ruleWithNoNoninteractiveElementToInteractiveRoleOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNoninteractiveElementToInteractiveRoleOptionsSchema.optional()
});

export const ruleWithNoNoninteractiveTabindexOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNoninteractiveTabindexOptionsSchema.optional()
});

export const ruleWithNoPositiveTabindexOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noPositiveTabindexOptionsSchema.optional()
});

export const ruleWithNoRedundantAltOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRedundantAltOptionsSchema.optional()
});

export const ruleWithNoRedundantRolesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRedundantRolesOptionsSchema.optional()
});

export const ruleWithNoStaticElementInteractionsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noStaticElementInteractionsOptionsSchema.optional()
});

export const ruleWithNoSvgWithoutTitleOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSvgWithoutTitleOptionsSchema.optional()
});

export const ruleWithUseAltTextOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAltTextOptionsSchema.optional()
});

export const ruleWithUseAnchorContentOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAnchorContentOptionsSchema.optional()
});

export const ruleWithUseAriaActivedescendantWithTabindexOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAriaActivedescendantWithTabindexOptionsSchema.optional()
});

export const ruleWithUseAriaPropsForRoleOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAriaPropsForRoleOptionsSchema.optional()
});

export const ruleWithUseAriaPropsSupportedByRoleOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAriaPropsSupportedByRoleOptionsSchema.optional()
});

export const ruleWithUseButtonTypeOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useButtonTypeOptionsSchema.optional()
});

export const ruleWithUseFocusableInteractiveOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useFocusableInteractiveOptionsSchema.optional()
});

export const ruleWithUseGenericFontNamesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useGenericFontNamesOptionsSchema.optional()
});

export const ruleWithUseHeadingContentOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useHeadingContentOptionsSchema.optional()
});

export const ruleWithUseHtmlLangOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useHtmlLangOptionsSchema.optional()
});

export const ruleWithUseIframeTitleOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useIframeTitleOptionsSchema.optional()
});

export const ruleWithUseKeyWithClickEventsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useKeyWithClickEventsOptionsSchema.optional()
});

export const ruleWithUseKeyWithMouseEventsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useKeyWithMouseEventsOptionsSchema.optional()
});

export const ruleWithUseMediaCaptionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useMediaCaptionOptionsSchema.optional()
});

export const ruleWithUseSemanticElementsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSemanticElementsOptionsSchema.optional()
});

export const ruleWithUseValidAnchorOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useValidAnchorOptionsSchema.optional()
});

export const ruleWithUseValidAriaPropsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useValidAriaPropsOptionsSchema.optional()
});

export const ruleWithUseValidAriaRoleOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useValidAriaRoleOptionsSchema.optional()
});

export const ruleWithUseValidAriaValuesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useValidAriaValuesOptionsSchema.optional()
});

export const ruleWithUseValidAutocompleteOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useValidAutocompleteOptionsSchema.optional()
});

export const ruleWithUseValidLangOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useValidLangOptionsSchema.optional()
});

export const ruleWithNoAdjacentSpacesInRegexOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAdjacentSpacesInRegexOptionsSchema.optional()
});

export const ruleWithNoArgumentsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noArgumentsOptionsSchema.optional()
});

export const ruleWithNoBannedTypesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noBannedTypesOptionsSchema.optional()
});

export const ruleWithNoCommaOperatorOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noCommaOperatorOptionsSchema.optional()
});

export const ruleWithNoEmptyTypeParametersOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noEmptyTypeParametersOptionsSchema.optional()
});

export const ruleWithNoExcessiveCognitiveComplexityOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noExcessiveCognitiveComplexityOptionsSchema.optional()
});

export const ruleWithNoExcessiveNestedTestSuitesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noExcessiveNestedTestSuitesOptionsSchema.optional()
});

export const ruleWithNoExtraBooleanCastOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noExtraBooleanCastOptionsSchema.optional()
});

export const ruleWithNoFlatMapIdentityOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noFlatMapIdentityOptionsSchema.optional()
});

export const ruleWithNoForEachOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noForEachOptionsSchema.optional()
});

export const ruleWithNoStaticOnlyClassOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noStaticOnlyClassOptionsSchema.optional()
});

export const ruleWithNoThisInStaticOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noThisInStaticOptionsSchema.optional()
});

export const ruleWithNoUselessCatchOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessCatchOptionsSchema.optional()
});

export const ruleWithNoUselessConstructorOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessConstructorOptionsSchema.optional()
});

export const ruleWithNoUselessContinueOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessContinueOptionsSchema.optional()
});

export const ruleWithNoUselessEmptyExportOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessEmptyExportOptionsSchema.optional()
});

export const ruleWithNoUselessEscapeInRegexOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessEscapeInRegexOptionsSchema.optional()
});

export const ruleWithNoUselessFragmentsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessFragmentsOptionsSchema.optional()
});

export const ruleWithNoUselessLabelOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessLabelOptionsSchema.optional()
});

export const ruleWithNoUselessLoneBlockStatementsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessLoneBlockStatementsOptionsSchema.optional()
});

export const ruleWithNoUselessRenameOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessRenameOptionsSchema.optional()
});

export const ruleWithNoUselessStringConcatOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessStringConcatOptionsSchema.optional()
});

export const ruleWithNoUselessStringRawOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessStringRawOptionsSchema.optional()
});

export const ruleWithNoUselessSwitchCaseOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessSwitchCaseOptionsSchema.optional()
});

export const ruleWithNoUselessTernaryOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessTernaryOptionsSchema.optional()
});

export const ruleWithNoUselessThisAliasOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessThisAliasOptionsSchema.optional()
});

export const ruleWithNoUselessTypeConstraintOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessTypeConstraintOptionsSchema.optional()
});

export const ruleWithNoUselessUndefinedInitializationOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessUndefinedInitializationOptionsSchema.optional()
});

export const ruleWithNoVoidOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noVoidOptionsSchema.optional()
});

export const ruleWithUseArrowFunctionOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useArrowFunctionOptionsSchema.optional()
});

export const ruleWithUseDateNowOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useDateNowOptionsSchema.optional()
});

export const ruleWithUseFlatMapOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useFlatMapOptionsSchema.optional()
});

export const ruleWithUseLiteralKeysOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useLiteralKeysOptionsSchema.optional()
});

export const ruleWithUseNumericLiteralsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNumericLiteralsOptionsSchema.optional()
});

export const ruleWithUseOptionalChainOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useOptionalChainOptionsSchema.optional()
});

export const ruleWithUseRegexLiteralsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useRegexLiteralsOptionsSchema.optional()
});

export const ruleWithUseSimpleNumberKeysOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSimpleNumberKeysOptionsSchema.optional()
});

export const ruleWithUseSimplifiedLogicExpressionOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSimplifiedLogicExpressionOptionsSchema.optional()
});

export const ruleWithUseWhileOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useWhileOptionsSchema.optional()
});

export const ruleWithNoChildrenPropOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noChildrenPropOptionsSchema.optional()
});

export const ruleWithNoConstAssignOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConstAssignOptionsSchema.optional()
});

export const ruleWithNoConstantConditionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConstantConditionOptionsSchema.optional()
});

export const ruleWithNoConstantMathMinMaxClampOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConstantMathMinMaxClampOptionsSchema.optional()
});

export const ruleWithNoConstructorReturnOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConstructorReturnOptionsSchema.optional()
});

export const ruleWithNoEmptyCharacterClassInRegexOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noEmptyCharacterClassInRegexOptionsSchema.optional()
});

export const ruleWithNoEmptyPatternOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noEmptyPatternOptionsSchema.optional()
});

export const ruleWithNoGlobalObjectCallsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noGlobalObjectCallsOptionsSchema.optional()
});

export const ruleWithNoInnerDeclarationsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInnerDeclarationsOptionsSchema.optional()
});

export const ruleWithNoInvalidBuiltinInstantiationOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInvalidBuiltinInstantiationOptionsSchema.optional()
});

export const ruleWithNoInvalidConstructorSuperOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInvalidConstructorSuperOptionsSchema.optional()
});

export const ruleWithNoInvalidDirectionInLinearGradientOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInvalidDirectionInLinearGradientOptionsSchema.optional()
});

export const ruleWithNoInvalidGridAreasOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInvalidGridAreasOptionsSchema.optional()
});

export const ruleWithNoInvalidPositionAtImportRuleOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInvalidPositionAtImportRuleOptionsSchema.optional()
});

export const ruleWithNoInvalidUseBeforeDeclarationOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInvalidUseBeforeDeclarationOptionsSchema.optional()
});

export const ruleWithNoMissingVarFunctionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noMissingVarFunctionOptionsSchema.optional()
});

export const ruleWithNoNodejsModulesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNodejsModulesOptionsSchema.optional()
});

export const ruleWithNoNonoctalDecimalEscapeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNonoctalDecimalEscapeOptionsSchema.optional()
});

export const ruleWithNoPrecisionLossOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noPrecisionLossOptionsSchema.optional()
});

export const ruleWithNoPrivateImportsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noPrivateImportsOptionsSchema.optional()
});

export const ruleWithNoRenderReturnValueOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRenderReturnValueOptionsSchema.optional()
});

export const ruleWithNoSelfAssignOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSelfAssignOptionsSchema.optional()
});

export const ruleWithNoSetterReturnOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSetterReturnOptionsSchema.optional()
});

export const ruleWithNoStringCaseMismatchOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noStringCaseMismatchOptionsSchema.optional()
});

export const ruleWithNoSwitchDeclarationsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSwitchDeclarationsOptionsSchema.optional()
});

export const ruleWithNoUndeclaredDependenciesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUndeclaredDependenciesOptionsSchema.optional()
});

export const ruleWithNoUndeclaredVariablesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUndeclaredVariablesOptionsSchema.optional()
});

export const ruleWithNoUnknownFunctionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnknownFunctionOptionsSchema.optional()
});

export const ruleWithNoUnknownMediaFeatureNameOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnknownMediaFeatureNameOptionsSchema.optional()
});

export const ruleWithNoUnknownPropertyOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnknownPropertyOptionsSchema.optional()
});

export const ruleWithNoUnknownPseudoClassOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnknownPseudoClassOptionsSchema.optional()
});

export const ruleWithNoUnknownPseudoElementOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnknownPseudoElementOptionsSchema.optional()
});

export const ruleWithNoUnknownTypeSelectorOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnknownTypeSelectorOptionsSchema.optional()
});

export const ruleWithNoUnknownUnitOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnknownUnitOptionsSchema.optional()
});

export const ruleWithNoUnmatchableAnbSelectorOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnmatchableAnbSelectorOptionsSchema.optional()
});

export const ruleWithNoUnreachableOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnreachableOptionsSchema.optional()
});

export const ruleWithNoUnreachableSuperOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnreachableSuperOptionsSchema.optional()
});

export const ruleWithNoUnsafeFinallyOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnsafeFinallyOptionsSchema.optional()
});

export const ruleWithNoUnsafeOptionalChainingOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnsafeOptionalChainingOptionsSchema.optional()
});

export const ruleWithNoUnusedFunctionParametersOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnusedFunctionParametersOptionsSchema.optional()
});

export const ruleWithNoUnusedImportsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnusedImportsOptionsSchema.optional()
});

export const ruleWithNoUnusedLabelsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnusedLabelsOptionsSchema.optional()
});

export const ruleWithNoUnusedPrivateClassMembersOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnusedPrivateClassMembersOptionsSchema.optional()
});

export const ruleWithNoUnusedVariablesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnusedVariablesOptionsSchema.optional()
});

export const ruleWithNoVoidElementsWithChildrenOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noVoidElementsWithChildrenOptionsSchema.optional()
});

export const ruleWithNoVoidTypeReturnOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noVoidTypeReturnOptionsSchema.optional()
});

export const ruleWithUseHookAtTopLevelOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useHookAtTopLevelOptionsSchema.optional()
});

export const ruleWithUseImportExtensionsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useImportExtensionsOptionsSchema.optional()
});

export const ruleWithUseIsNanOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useIsNanOptionsSchema.optional()
});

export const ruleWithUseJsxKeyInIterableOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useJsxKeyInIterableOptionsSchema.optional()
});

export const ruleWithUseValidForDirectionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useValidForDirectionOptionsSchema.optional()
});

export const ruleWithUseValidTypeofOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useValidTypeofOptionsSchema.optional()
});

export const ruleWithUseYieldOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useYieldOptionsSchema.optional()
});

export const ruleWithNoAwaitInLoopOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAwaitInLoopOptionsSchema.optional()
});

export const ruleWithNoBitwiseOperatorsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noBitwiseOperatorsOptionsSchema.optional()
});

export const ruleWithNoConstantBinaryExpressionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConstantBinaryExpressionOptionsSchema.optional()
});

export const ruleWithNoDestructuredPropsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDestructuredPropsOptionsSchema.optional()
});

export const ruleWithNoExcessiveLinesPerFunctionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noExcessiveLinesPerFunctionOptionsSchema.optional()
});

export const ruleWithNoFloatingPromisesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noFloatingPromisesOptionsSchema.optional()
});

export const ruleWithNoGlobalDirnameFilenameOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noGlobalDirnameFilenameOptionsSchema.optional()
});

export const ruleWithNoImplicitCoercionOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noImplicitCoercionOptionsSchema.optional()
});

export const ruleWithNoImportCyclesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noImportCyclesOptionsSchema.optional()
});

export const ruleWithNoImportantStylesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noImportantStylesOptionsSchema.optional()
});

export const ruleWithNoMagicNumbersOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noMagicNumbersOptionsSchema.optional()
});

export const ruleWithNoMisusedPromisesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noMisusedPromisesOptionsSchema.optional()
});

export const ruleWithNoNestedComponentDefinitionsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNestedComponentDefinitionsOptionsSchema.optional()
});

export const ruleWithNoNoninteractiveElementInteractionsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNoninteractiveElementInteractionsOptionsSchema.optional()
});

export const ruleWithNoProcessGlobalOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noProcessGlobalOptionsSchema.optional()
});

export const ruleWithNoReactPropAssignOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noReactPropAssignOptionsSchema.optional()
});

export const ruleWithNoSecretsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSecretsOptionsSchema.optional()
});

export const ruleWithNoShadowOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noShadowOptionsSchema.optional()
});

export const ruleWithNoTsIgnoreOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noTsIgnoreOptionsSchema.optional()
});

export const ruleWithNoUnassignedVariablesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnassignedVariablesOptionsSchema.optional()
});

export const ruleWithNoUnknownAtRuleOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnknownAtRuleOptionsSchema.optional()
});

export const ruleWithNoUnresolvedImportsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnresolvedImportsOptionsSchema.optional()
});

export const ruleWithNoUnwantedPolyfillioOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnwantedPolyfillioOptionsSchema.optional()
});

export const ruleWithNoUselessBackrefInRegexOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessBackrefInRegexOptionsSchema.optional()
});

export const ruleWithNoUselessEscapeInStringOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessEscapeInStringOptionsSchema.optional()
});

export const ruleWithNoUselessUndefinedOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessUndefinedOptionsSchema.optional()
});

export const ruleWithUseAdjacentGetterSetterOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAdjacentGetterSetterOptionsSchema.optional()
});

export const ruleWithUseConsistentObjectDefinitionOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useConsistentObjectDefinitionOptionsSchema.optional()
});

export const ruleWithUseConsistentResponseOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useConsistentResponseOptionsSchema.optional()
});

export const ruleWithUseExhaustiveSwitchCasesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useExhaustiveSwitchCasesOptionsSchema.optional()
});

export const ruleWithUseExplicitTypeOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useExplicitTypeOptionsSchema.optional()
});

export const ruleWithUseExportsLastOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useExportsLastOptionsSchema.optional()
});

export const ruleWithUseForComponentOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useForComponentOptionsSchema.optional()
});

export const ruleWithUseGoogleFontPreconnectOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useGoogleFontPreconnectOptionsSchema.optional()
});

export const ruleWithUseIndexOfOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useIndexOfOptionsSchema.optional()
});

export const ruleWithUseIterableCallbackReturnOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useIterableCallbackReturnOptionsSchema.optional()
});

export const ruleWithUseJsonImportAttributeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useJsonImportAttributeOptionsSchema.optional()
});

export const ruleWithUseNamedOperationOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNamedOperationOptionsSchema.optional()
});

export const ruleWithUseNumericSeparatorsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNumericSeparatorsOptionsSchema.optional()
});

export const ruleWithUseObjectSpreadOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useObjectSpreadOptionsSchema.optional()
});

export const ruleWithUseParseIntRadixOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useParseIntRadixOptionsSchema.optional()
});

export const ruleWithUseReadonlyClassPropertiesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useReadonlyClassPropertiesOptionsSchema.optional()
});

export const ruleWithUseSingleJsDocAsteriskOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSingleJsDocAsteriskOptionsSchema.optional()
});

export const ruleWithUseSortedClassesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSortedClassesOptionsSchema.optional()
});

export const ruleWithUseSymbolDescriptionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSymbolDescriptionOptionsSchema.optional()
});

export const ruleWithUseUnifiedTypeSignatureOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useUnifiedTypeSignatureOptionsSchema.optional()
});

export const ruleWithUseUniqueElementIdsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useUniqueElementIdsOptionsSchema.optional()
});

export const ruleWithNoAccumulatingSpreadOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAccumulatingSpreadOptionsSchema.optional()
});

export const ruleWithNoBarrelFileOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noBarrelFileOptionsSchema.optional()
});

export const ruleWithNoDeleteOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDeleteOptionsSchema.optional()
});

export const ruleWithNoDynamicNamespaceImportAccessOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDynamicNamespaceImportAccessOptionsSchema.optional()
});

export const ruleWithNoImgElementOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noImgElementOptionsSchema.optional()
});

export const ruleWithNoNamespaceImportOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNamespaceImportOptionsSchema.optional()
});

export const ruleWithNoReExportAllOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noReExportAllOptionsSchema.optional()
});

export const ruleWithUseTopLevelRegexOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useTopLevelRegexOptionsSchema.optional()
});

export const ruleWithNoBlankTargetOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noBlankTargetOptionsSchema.optional()
});

export const ruleWithNoDangerouslySetInnerHtmlOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDangerouslySetInnerHtmlOptionsSchema.optional()
});

export const ruleWithNoDangerouslySetInnerHtmlWithChildrenOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDangerouslySetInnerHtmlWithChildrenOptionsSchema.optional()
});

export const ruleWithNoGlobalEvalOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noGlobalEvalOptionsSchema.optional()
});

export const ruleWithNoCommonJsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noCommonJsOptionsSchema.optional()
});

export const ruleWithNoDefaultExportOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDefaultExportOptionsSchema.optional()
});

export const ruleWithNoDescendingSpecificityOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDescendingSpecificityOptionsSchema.optional()
});

export const ruleWithNoDoneCallbackOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDoneCallbackOptionsSchema.optional()
});

export const ruleWithNoEnumOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noEnumOptionsSchema.optional()
});

export const ruleWithNoExportedImportsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noExportedImportsOptionsSchema.optional()
});

export const ruleWithNoHeadElementOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noHeadElementOptionsSchema.optional()
});

export const ruleWithNoImplicitBooleanOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noImplicitBooleanOptionsSchema.optional()
});

export const ruleWithNoInferrableTypesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noInferrableTypesOptionsSchema.optional()
});

export const ruleWithNoNamespaceOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNamespaceOptionsSchema.optional()
});

export const ruleWithNoNegationElseOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNegationElseOptionsSchema.optional()
});

export const ruleWithNoNestedTernaryOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNestedTernaryOptionsSchema.optional()
});

export const ruleWithNoNonNullAssertionOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noNonNullAssertionOptionsSchema.optional()
});

export const ruleWithNoParameterAssignOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noParameterAssignOptionsSchema.optional()
});

export const ruleWithNoParameterPropertiesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noParameterPropertiesOptionsSchema.optional()
});

export const ruleWithNoProcessEnvOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noProcessEnvOptionsSchema.optional()
});

export const ruleWithNoRestrictedGlobalsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRestrictedGlobalsOptionsSchema.optional()
});

export const ruleWithNoShoutyConstantsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noShoutyConstantsOptionsSchema.optional()
});

export const ruleWithNoSubstrOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSubstrOptionsSchema.optional()
});

export const ruleWithNoUnusedTemplateLiteralOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnusedTemplateLiteralOptionsSchema.optional()
});

export const ruleWithNoUselessElseOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUselessElseOptionsSchema.optional()
});

export const ruleWithNoValueAtRuleOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noValueAtRuleOptionsSchema.optional()
});

export const ruleWithNoYodaExpressionOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noYodaExpressionOptionsSchema.optional()
});

export const ruleWithUseArrayLiteralsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useArrayLiteralsOptionsSchema.optional()
});

export const ruleWithUseAsConstAssertionOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAsConstAssertionOptionsSchema.optional()
});

export const ruleWithUseAtIndexOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAtIndexOptionsSchema.optional()
});

export const ruleWithUseBlockStatementsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useBlockStatementsOptionsSchema.optional()
});

export const ruleWithUseCollapsedElseIfOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useCollapsedElseIfOptionsSchema.optional()
});

export const ruleWithUseCollapsedIfOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useCollapsedIfOptionsSchema.optional()
});

export const ruleWithUseComponentExportOnlyModulesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useComponentExportOnlyModulesOptionsSchema.optional()
});

export const ruleWithUseConsistentArrayTypeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useConsistentArrayTypeOptionsSchema.optional()
});

export const ruleWithUseConsistentBuiltinInstantiationOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useConsistentBuiltinInstantiationOptionsSchema.optional()
});

export const ruleWithUseConsistentCurlyBracesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useConsistentCurlyBracesOptionsSchema.optional()
});

export const ruleWithUseConsistentMemberAccessibilityOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useConsistentMemberAccessibilityOptionsSchema.optional()
});

export const ruleWithUseConstOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useConstOptionsSchema.optional()
});

export const ruleWithUseDefaultParameterLastOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useDefaultParameterLastOptionsSchema.optional()
});

export const ruleWithUseDefaultSwitchClauseOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useDefaultSwitchClauseOptionsSchema.optional()
});

export const ruleWithUseDeprecatedReasonOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useDeprecatedReasonOptionsSchema.optional()
});

export const ruleWithUseEnumInitializersOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useEnumInitializersOptionsSchema.optional()
});

export const ruleWithUseExplicitLengthCheckOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useExplicitLengthCheckOptionsSchema.optional()
});

export const ruleWithUseExponentiationOperatorOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useExponentiationOperatorOptionsSchema.optional()
});

export const ruleWithUseExportTypeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useExportTypeOptionsSchema.optional()
});

export const ruleWithUseFilenamingConventionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useFilenamingConventionOptionsSchema.optional()
});

export const ruleWithUseForOfOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useForOfOptionsSchema.optional()
});

export const ruleWithUseFragmentSyntaxOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useFragmentSyntaxOptionsSchema.optional()
});

export const ruleWithUseImportTypeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useImportTypeOptionsSchema.optional()
});

export const ruleWithUseLiteralEnumMembersOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useLiteralEnumMembersOptionsSchema.optional()
});

export const ruleWithUseNodeAssertStrictOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNodeAssertStrictOptionsSchema.optional()
});

export const ruleWithUseNodejsImportProtocolOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNodejsImportProtocolOptionsSchema.optional()
});

export const ruleWithUseNumberNamespaceOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNumberNamespaceOptionsSchema.optional()
});

export const ruleWithUseSelfClosingElementsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSelfClosingElementsOptionsSchema.optional()
});

export const ruleWithUseShorthandAssignOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useShorthandAssignOptionsSchema.optional()
});

export const ruleWithUseShorthandFunctionTypeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useShorthandFunctionTypeOptionsSchema.optional()
});

export const ruleWithUseSingleVarDeclaratorOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useSingleVarDeclaratorOptionsSchema.optional()
});

export const ruleWithUseTemplateOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useTemplateOptionsSchema.optional()
});

export const ruleWithUseThrowNewErrorOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useThrowNewErrorOptionsSchema.optional()
});

export const ruleWithUseThrowOnlyErrorOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useThrowOnlyErrorOptionsSchema.optional()
});

export const ruleWithUseTrimStartEndOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useTrimStartEndOptionsSchema.optional()
});

export const ruleWithNoAlertOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAlertOptionsSchema.optional()
});

export const ruleWithNoApproximativeNumericConstantOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noApproximativeNumericConstantOptionsSchema.optional()
});

export const ruleWithNoArrayIndexKeyOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noArrayIndexKeyOptionsSchema.optional()
});

export const ruleWithNoAssignInExpressionsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAssignInExpressionsOptionsSchema.optional()
});

export const ruleWithNoAsyncPromiseExecutorOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noAsyncPromiseExecutorOptionsSchema.optional()
});

export const ruleWithNoCatchAssignOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noCatchAssignOptionsSchema.optional()
});

export const ruleWithNoClassAssignOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noClassAssignOptionsSchema.optional()
});

export const ruleWithNoCommentTextOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noCommentTextOptionsSchema.optional()
});

export const ruleWithNoCompareNegZeroOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noCompareNegZeroOptionsSchema.optional()
});

export const ruleWithNoConfusingLabelsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConfusingLabelsOptionsSchema.optional()
});

export const ruleWithNoConfusingVoidTypeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConfusingVoidTypeOptionsSchema.optional()
});

export const ruleWithNoConsoleOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConsoleOptionsSchema.optional()
});

export const ruleWithNoConstEnumOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noConstEnumOptionsSchema.optional()
});

export const ruleWithNoControlCharactersInRegexOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noControlCharactersInRegexOptionsSchema.optional()
});

export const ruleWithNoDebuggerOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDebuggerOptionsSchema.optional()
});

export const ruleWithNoDocumentCookieOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDocumentCookieOptionsSchema.optional()
});

export const ruleWithNoDocumentImportInPageOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDocumentImportInPageOptionsSchema.optional()
});

export const ruleWithNoDoubleEqualsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDoubleEqualsOptionsSchema.optional()
});

export const ruleWithNoDuplicateAtImportRulesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateAtImportRulesOptionsSchema.optional()
});

export const ruleWithNoDuplicateCaseOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateCaseOptionsSchema.optional()
});

export const ruleWithNoDuplicateClassMembersOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateClassMembersOptionsSchema.optional()
});

export const ruleWithNoDuplicateCustomPropertiesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateCustomPropertiesOptionsSchema.optional()
});

export const ruleWithNoDuplicateElseIfOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateElseIfOptionsSchema.optional()
});

export const ruleWithNoDuplicateFieldsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateFieldsOptionsSchema.optional()
});

export const ruleWithNoDuplicateFontNamesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateFontNamesOptionsSchema.optional()
});

export const ruleWithNoDuplicateJsxPropsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateJsxPropsOptionsSchema.optional()
});

export const ruleWithNoDuplicateObjectKeysOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateObjectKeysOptionsSchema.optional()
});

export const ruleWithNoDuplicateParametersOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateParametersOptionsSchema.optional()
});

export const ruleWithNoDuplicatePropertiesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicatePropertiesOptionsSchema.optional()
});

export const ruleWithNoDuplicateSelectorsKeyframeBlockOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateSelectorsKeyframeBlockOptionsSchema.optional()
});

export const ruleWithNoDuplicateTestHooksOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noDuplicateTestHooksOptionsSchema.optional()
});

export const ruleWithNoEmptyBlockOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noEmptyBlockOptionsSchema.optional()
});

export const ruleWithNoEmptyBlockStatementsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noEmptyBlockStatementsOptionsSchema.optional()
});

export const ruleWithNoEmptyInterfaceOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noEmptyInterfaceOptionsSchema.optional()
});

export const ruleWithNoEvolvingTypesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noEvolvingTypesOptionsSchema.optional()
});

export const ruleWithNoExplicitAnyOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noExplicitAnyOptionsSchema.optional()
});

export const ruleWithNoExportsInTestOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noExportsInTestOptionsSchema.optional()
});

export const ruleWithNoExtraNonNullAssertionOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noExtraNonNullAssertionOptionsSchema.optional()
});

export const ruleWithNoFallthroughSwitchClauseOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noFallthroughSwitchClauseOptionsSchema.optional()
});

export const ruleWithNoFocusedTestsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noFocusedTestsOptionsSchema.optional()
});

export const ruleWithNoFunctionAssignOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noFunctionAssignOptionsSchema.optional()
});

export const ruleWithNoGlobalAssignOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noGlobalAssignOptionsSchema.optional()
});

export const ruleWithNoGlobalIsFiniteOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noGlobalIsFiniteOptionsSchema.optional()
});

export const ruleWithNoGlobalIsNanOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noGlobalIsNanOptionsSchema.optional()
});

export const ruleWithNoHeadImportInDocumentOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noHeadImportInDocumentOptionsSchema.optional()
});

export const ruleWithNoImplicitAnyLetOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noImplicitAnyLetOptionsSchema.optional()
});

export const ruleWithNoImportAssignOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noImportAssignOptionsSchema.optional()
});

export const ruleWithNoImportantInKeyframeOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noImportantInKeyframeOptionsSchema.optional()
});

export const ruleWithNoIrregularWhitespaceOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noIrregularWhitespaceOptionsSchema.optional()
});

export const ruleWithNoLabelVarOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noLabelVarOptionsSchema.optional()
});

export const ruleWithNoMisleadingCharacterClassOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noMisleadingCharacterClassOptionsSchema.optional()
});

export const ruleWithNoMisleadingInstantiatorOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noMisleadingInstantiatorOptionsSchema.optional()
});

export const ruleWithNoMisplacedAssertionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noMisplacedAssertionOptionsSchema.optional()
});

export const ruleWithNoMisrefactoredShorthandAssignOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noMisrefactoredShorthandAssignOptionsSchema.optional()
});

export const ruleWithNoOctalEscapeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noOctalEscapeOptionsSchema.optional()
});

export const ruleWithNoPrototypeBuiltinsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noPrototypeBuiltinsOptionsSchema.optional()
});

export const ruleWithNoReactSpecificPropsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noReactSpecificPropsOptionsSchema.optional()
});

export const ruleWithNoRedeclareOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRedeclareOptionsSchema.optional()
});

export const ruleWithNoRedundantUseStrictOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRedundantUseStrictOptionsSchema.optional()
});

export const ruleWithNoSelfCompareOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSelfCompareOptionsSchema.optional()
});

export const ruleWithNoShadowRestrictedNamesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noShadowRestrictedNamesOptionsSchema.optional()
});

export const ruleWithNoShorthandPropertyOverridesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noShorthandPropertyOverridesOptionsSchema.optional()
});

export const ruleWithNoSkippedTestsOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSkippedTestsOptionsSchema.optional()
});

export const ruleWithNoSparseArrayOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSparseArrayOptionsSchema.optional()
});

export const ruleWithNoSuspiciousSemicolonInJsxOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noSuspiciousSemicolonInJsxOptionsSchema.optional()
});

export const ruleWithNoTemplateCurlyInStringOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noTemplateCurlyInStringOptionsSchema.optional()
});

export const ruleWithNoThenPropertyOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noThenPropertyOptionsSchema.optional()
});

export const ruleWithNoUnsafeDeclarationMergingOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnsafeDeclarationMergingOptionsSchema.optional()
});

export const ruleWithNoUnsafeNegationOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noUnsafeNegationOptionsSchema.optional()
});

export const ruleWithNoVarOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noVarOptionsSchema.optional()
});

export const ruleWithNoWithOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noWithOptionsSchema.optional()
});

export const ruleWithUseAdjacentOverloadSignaturesOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAdjacentOverloadSignaturesOptionsSchema.optional()
});

export const ruleWithUseAwaitOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useAwaitOptionsSchema.optional()
});

export const ruleWithUseDefaultSwitchClauseLastOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useDefaultSwitchClauseLastOptionsSchema.optional()
});

export const ruleWithUseErrorMessageOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useErrorMessageOptionsSchema.optional()
});

export const ruleWithUseGetterReturnOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useGetterReturnOptionsSchema.optional()
});

export const ruleWithUseGoogleFontDisplayOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useGoogleFontDisplayOptionsSchema.optional()
});

export const ruleWithUseGuardForInOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useGuardForInOptionsSchema.optional()
});

export const ruleWithUseIsArrayOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useIsArrayOptionsSchema.optional()
});

export const ruleWithUseNamespaceKeywordOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNamespaceKeywordOptionsSchema.optional()
});

export const ruleWithUseNumberToFixedDigitsArgumentOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNumberToFixedDigitsArgumentOptionsSchema.optional()
});

export const ruleWithUseStrictModeOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useStrictModeOptionsSchema.optional()
});

export const ruleAssistConfigurationForUseSortedAttributesOptionsSchema = z.union([ruleAssistPlainConfigurationSchema, ruleAssistWithOptionsForUseSortedAttributesOptionsSchema]);

export const ruleAssistConfigurationForUseSortedKeysOptionsSchema = z.union([ruleAssistPlainConfigurationSchema, ruleAssistWithOptionsForUseSortedKeysOptionsSchema]);

export const ruleAssistConfigurationForUseSortedPropertiesOptionsSchema = z.union([ruleAssistPlainConfigurationSchema, ruleAssistWithOptionsForUseSortedPropertiesOptionsSchema]);

export const noAccessKeyConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAccessKeyOptionsSchema]);

export const noAriaHiddenOnFocusableConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAriaHiddenOnFocusableOptionsSchema]);

export const noAriaUnsupportedElementsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAriaUnsupportedElementsOptionsSchema]);

export const noAutofocusConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAutofocusOptionsSchema]);

export const noDistractingElementsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDistractingElementsOptionsSchema]);

export const noHeaderScopeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoHeaderScopeOptionsSchema]);

export const noInteractiveElementToNoninteractiveRoleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInteractiveElementToNoninteractiveRoleOptionsSchema]);

export const noLabelWithoutControlConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoLabelWithoutControlOptionsSchema]);

export const noNoninteractiveElementToInteractiveRoleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNoninteractiveElementToInteractiveRoleOptionsSchema]);

export const noNoninteractiveTabindexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNoninteractiveTabindexOptionsSchema]);

export const noPositiveTabindexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoPositiveTabindexOptionsSchema]);

export const noRedundantAltConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRedundantAltOptionsSchema]);

export const noRedundantRolesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRedundantRolesOptionsSchema]);

export const noStaticElementInteractionsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoStaticElementInteractionsOptionsSchema]);

export const noSvgWithoutTitleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSvgWithoutTitleOptionsSchema]);

export const useAltTextConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAltTextOptionsSchema]);

export const useAnchorContentConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAnchorContentOptionsSchema]);

export const useAriaActivedescendantWithTabindexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAriaActivedescendantWithTabindexOptionsSchema]);

export const useAriaPropsForRoleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAriaPropsForRoleOptionsSchema]);

export const useAriaPropsSupportedByRoleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAriaPropsSupportedByRoleOptionsSchema]);

export const useButtonTypeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseButtonTypeOptionsSchema]);

export const useFocusableInteractiveConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseFocusableInteractiveOptionsSchema]);

export const useGenericFontNamesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseGenericFontNamesOptionsSchema]);

export const useHeadingContentConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseHeadingContentOptionsSchema]);

export const useHtmlLangConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseHtmlLangOptionsSchema]);

export const useIframeTitleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseIframeTitleOptionsSchema]);

export const useKeyWithClickEventsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseKeyWithClickEventsOptionsSchema]);

export const useKeyWithMouseEventsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseKeyWithMouseEventsOptionsSchema]);

export const useMediaCaptionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseMediaCaptionOptionsSchema]);

export const useSemanticElementsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseSemanticElementsOptionsSchema]);

export const useValidAnchorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseValidAnchorOptionsSchema]);

export const useValidAriaPropsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseValidAriaPropsOptionsSchema]);

export const useValidAriaRoleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseValidAriaRoleOptionsSchema]);

export const useValidAriaValuesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseValidAriaValuesOptionsSchema]);

export const useValidAutocompleteConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseValidAutocompleteOptionsSchema]);

export const useValidLangConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseValidLangOptionsSchema]);

export const noAdjacentSpacesInRegexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAdjacentSpacesInRegexOptionsSchema]);

export const noArgumentsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoArgumentsOptionsSchema]);

export const noBannedTypesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoBannedTypesOptionsSchema]);

export const noCommaOperatorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoCommaOperatorOptionsSchema]);

export const noEmptyTypeParametersConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoEmptyTypeParametersOptionsSchema]);

export const noExcessiveCognitiveComplexityConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoExcessiveCognitiveComplexityOptionsSchema]);

export const noExcessiveNestedTestSuitesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoExcessiveNestedTestSuitesOptionsSchema]);

export const noExtraBooleanCastConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoExtraBooleanCastOptionsSchema]);

export const noFlatMapIdentityConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoFlatMapIdentityOptionsSchema]);

export const noForEachConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoForEachOptionsSchema]);

export const noStaticOnlyClassConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoStaticOnlyClassOptionsSchema]);

export const noThisInStaticConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoThisInStaticOptionsSchema]);

export const noUselessCatchConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessCatchOptionsSchema]);

export const noUselessConstructorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessConstructorOptionsSchema]);

export const noUselessContinueConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessContinueOptionsSchema]);

export const noUselessEmptyExportConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessEmptyExportOptionsSchema]);

export const noUselessEscapeInRegexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessEscapeInRegexOptionsSchema]);

export const noUselessFragmentsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessFragmentsOptionsSchema]);

export const noUselessLabelConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessLabelOptionsSchema]);

export const noUselessLoneBlockStatementsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessLoneBlockStatementsOptionsSchema]);

export const noUselessRenameConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessRenameOptionsSchema]);

export const noUselessStringConcatConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessStringConcatOptionsSchema]);

export const noUselessStringRawConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessStringRawOptionsSchema]);

export const noUselessSwitchCaseConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessSwitchCaseOptionsSchema]);

export const noUselessTernaryConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessTernaryOptionsSchema]);

export const noUselessThisAliasConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessThisAliasOptionsSchema]);

export const noUselessTypeConstraintConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessTypeConstraintOptionsSchema]);

export const noUselessUndefinedInitializationConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessUndefinedInitializationOptionsSchema]);

export const noVoidConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoVoidOptionsSchema]);

export const useArrowFunctionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseArrowFunctionOptionsSchema]);

export const useDateNowConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseDateNowOptionsSchema]);

export const useFlatMapConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseFlatMapOptionsSchema]);

export const useLiteralKeysConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseLiteralKeysOptionsSchema]);

export const useNumericLiteralsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNumericLiteralsOptionsSchema]);

export const useOptionalChainConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseOptionalChainOptionsSchema]);

export const useRegexLiteralsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseRegexLiteralsOptionsSchema]);

export const useSimpleNumberKeysConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseSimpleNumberKeysOptionsSchema]);

export const useSimplifiedLogicExpressionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseSimplifiedLogicExpressionOptionsSchema]);

export const useWhileConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseWhileOptionsSchema]);

export const noChildrenPropConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoChildrenPropOptionsSchema]);

export const noConstAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConstAssignOptionsSchema]);

export const noConstantConditionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConstantConditionOptionsSchema]);

export const noConstantMathMinMaxClampConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConstantMathMinMaxClampOptionsSchema]);

export const noConstructorReturnConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConstructorReturnOptionsSchema]);

export const noEmptyCharacterClassInRegexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoEmptyCharacterClassInRegexOptionsSchema]);

export const noEmptyPatternConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoEmptyPatternOptionsSchema]);

export const noGlobalObjectCallsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoGlobalObjectCallsOptionsSchema]);

export const noInnerDeclarationsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInnerDeclarationsOptionsSchema]);

export const noInvalidBuiltinInstantiationConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInvalidBuiltinInstantiationOptionsSchema]);

export const noInvalidConstructorSuperConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInvalidConstructorSuperOptionsSchema]);

export const noInvalidDirectionInLinearGradientConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInvalidDirectionInLinearGradientOptionsSchema]);

export const noInvalidGridAreasConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInvalidGridAreasOptionsSchema]);

export const noInvalidPositionAtImportRuleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInvalidPositionAtImportRuleOptionsSchema]);

export const noInvalidUseBeforeDeclarationConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInvalidUseBeforeDeclarationOptionsSchema]);

export const noMissingVarFunctionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoMissingVarFunctionOptionsSchema]);

export const noNodejsModulesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNodejsModulesOptionsSchema]);

export const noNonoctalDecimalEscapeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNonoctalDecimalEscapeOptionsSchema]);

export const noPrecisionLossConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoPrecisionLossOptionsSchema]);

export const noPrivateImportsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoPrivateImportsOptionsSchema]);

export const noRenderReturnValueConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRenderReturnValueOptionsSchema]);

export const noSelfAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSelfAssignOptionsSchema]);

export const noSetterReturnConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSetterReturnOptionsSchema]);

export const noStringCaseMismatchConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoStringCaseMismatchOptionsSchema]);

export const noSwitchDeclarationsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSwitchDeclarationsOptionsSchema]);

export const noUndeclaredDependenciesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUndeclaredDependenciesOptionsSchema]);

export const noUndeclaredVariablesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUndeclaredVariablesOptionsSchema]);

export const noUnknownFunctionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnknownFunctionOptionsSchema]);

export const noUnknownMediaFeatureNameConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnknownMediaFeatureNameOptionsSchema]);

export const noUnknownPropertyConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnknownPropertyOptionsSchema]);

export const noUnknownPseudoClassConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnknownPseudoClassOptionsSchema]);

export const noUnknownPseudoElementConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnknownPseudoElementOptionsSchema]);

export const noUnknownTypeSelectorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnknownTypeSelectorOptionsSchema]);

export const noUnknownUnitConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnknownUnitOptionsSchema]);

export const noUnmatchableAnbSelectorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnmatchableAnbSelectorOptionsSchema]);

export const noUnreachableConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnreachableOptionsSchema]);

export const noUnreachableSuperConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnreachableSuperOptionsSchema]);

export const noUnsafeFinallyConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnsafeFinallyOptionsSchema]);

export const noUnsafeOptionalChainingConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnsafeOptionalChainingOptionsSchema]);

export const noUnusedFunctionParametersConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnusedFunctionParametersOptionsSchema]);

export const noUnusedImportsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnusedImportsOptionsSchema]);

export const noUnusedLabelsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnusedLabelsOptionsSchema]);

export const noUnusedPrivateClassMembersConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnusedPrivateClassMembersOptionsSchema]);

export const noUnusedVariablesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnusedVariablesOptionsSchema]);

export const noVoidElementsWithChildrenConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoVoidElementsWithChildrenOptionsSchema]);

export const noVoidTypeReturnConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoVoidTypeReturnOptionsSchema]);

export const useHookAtTopLevelConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseHookAtTopLevelOptionsSchema]);

export const useImportExtensionsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseImportExtensionsOptionsSchema]);

export const useIsNanConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseIsNanOptionsSchema]);

export const useJsxKeyInIterableConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseJsxKeyInIterableOptionsSchema]);

export const useValidForDirectionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseValidForDirectionOptionsSchema]);

export const useValidTypeofConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseValidTypeofOptionsSchema]);

export const useYieldConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseYieldOptionsSchema]);

export const useExhaustiveDependenciesOptionsSchema = z.object({
    /**
     * List of hooks of which the dependencies should be validated.
     */
    hooks: z.array(hookSchema).optional(),
    /**
     * Whether to report an error when a hook has no dependencies array.
     */
    reportMissingDependenciesArray: z.boolean().optional(),
    /**
     * Whether to report an error when a dependency is listed in the dependencies array but isn't used. Defaults to true.
     */
    reportUnnecessaryDependencies: z.boolean().optional()
});

export const noAwaitInLoopConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAwaitInLoopOptionsSchema]);

export const noBitwiseOperatorsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoBitwiseOperatorsOptionsSchema]);

export const noConstantBinaryExpressionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConstantBinaryExpressionOptionsSchema]);

export const noDestructuredPropsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDestructuredPropsOptionsSchema]);

export const noExcessiveLinesPerFunctionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoExcessiveLinesPerFunctionOptionsSchema]);

export const noFloatingPromisesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoFloatingPromisesOptionsSchema]);

export const noGlobalDirnameFilenameConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoGlobalDirnameFilenameOptionsSchema]);

export const noImplicitCoercionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoImplicitCoercionOptionsSchema]);

export const noImportCyclesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoImportCyclesOptionsSchema]);

export const noImportantStylesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoImportantStylesOptionsSchema]);

export const noMagicNumbersConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoMagicNumbersOptionsSchema]);

export const noMisusedPromisesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoMisusedPromisesOptionsSchema]);

export const noNestedComponentDefinitionsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNestedComponentDefinitionsOptionsSchema]);

export const noNoninteractiveElementInteractionsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNoninteractiveElementInteractionsOptionsSchema]);

export const noProcessGlobalConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoProcessGlobalOptionsSchema]);

export const noReactPropAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoReactPropAssignOptionsSchema]);

export const noSecretsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSecretsOptionsSchema]);

export const noShadowConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoShadowOptionsSchema]);

export const noTsIgnoreConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoTsIgnoreOptionsSchema]);

export const noUnassignedVariablesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnassignedVariablesOptionsSchema]);

export const noUnknownAtRuleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnknownAtRuleOptionsSchema]);

export const noUnresolvedImportsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnresolvedImportsOptionsSchema]);

export const noUnwantedPolyfillioConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnwantedPolyfillioOptionsSchema]);

export const noUselessBackrefInRegexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessBackrefInRegexOptionsSchema]);

export const noUselessEscapeInStringConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessEscapeInStringOptionsSchema]);

export const noUselessUndefinedConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessUndefinedOptionsSchema]);

export const useAdjacentGetterSetterConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAdjacentGetterSetterOptionsSchema]);

export const useConsistentObjectDefinitionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseConsistentObjectDefinitionOptionsSchema]);

export const useConsistentResponseConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseConsistentResponseOptionsSchema]);

export const useExhaustiveSwitchCasesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseExhaustiveSwitchCasesOptionsSchema]);

export const useExplicitTypeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseExplicitTypeOptionsSchema]);

export const useExportsLastConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseExportsLastOptionsSchema]);

export const useForComponentConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseForComponentOptionsSchema]);

export const useGoogleFontPreconnectConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseGoogleFontPreconnectOptionsSchema]);

export const useIndexOfConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseIndexOfOptionsSchema]);

export const useIterableCallbackReturnConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseIterableCallbackReturnOptionsSchema]);

export const useJsonImportAttributeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseJsonImportAttributeOptionsSchema]);

export const useNamedOperationConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNamedOperationOptionsSchema]);

export const useNumericSeparatorsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNumericSeparatorsOptionsSchema]);

export const useObjectSpreadConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseObjectSpreadOptionsSchema]);

export const useParseIntRadixConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseParseIntRadixOptionsSchema]);

export const useReadonlyClassPropertiesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseReadonlyClassPropertiesOptionsSchema]);

export const useSingleJsDocAsteriskConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseSingleJsDocAsteriskOptionsSchema]);

export const useSortedClassesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseSortedClassesOptionsSchema]);

export const useSymbolDescriptionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseSymbolDescriptionOptionsSchema]);

export const useUnifiedTypeSignatureConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseUnifiedTypeSignatureOptionsSchema]);

export const useUniqueElementIdsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseUniqueElementIdsOptionsSchema]);

export const noRestrictedElementsOptionsSchema = z.object({
    /**
     * Elements to restrict. Each key is the element name, and the value is the message to show when the element is used.
     */
    elements: customRestrictedElementsSchema.optional()
});

export const conventionSchema = z.object({
    /**
     * String cases to enforce
     */
    formats: formatsSchema.optional(),
    /**
     * Regular expression to enforce
     */
    match: regexSchema.optional().nullable(),
    /**
     * Declarations concerned by this convention
     */
    selector: selectorSchema.optional()
});

export const noAccumulatingSpreadConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAccumulatingSpreadOptionsSchema]);

export const noBarrelFileConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoBarrelFileOptionsSchema]);

export const noDeleteConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDeleteOptionsSchema]);

export const noDynamicNamespaceImportAccessConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDynamicNamespaceImportAccessOptionsSchema]);

export const noImgElementConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoImgElementOptionsSchema]);

export const noNamespaceImportConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNamespaceImportOptionsSchema]);

export const noReExportAllConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoReExportAllOptionsSchema]);

export const useTopLevelRegexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseTopLevelRegexOptionsSchema]);

export const noBlankTargetConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoBlankTargetOptionsSchema]);

export const noDangerouslySetInnerHtmlConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDangerouslySetInnerHtmlOptionsSchema]);

export const noDangerouslySetInnerHtmlWithChildrenConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDangerouslySetInnerHtmlWithChildrenOptionsSchema]);

export const noGlobalEvalConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoGlobalEvalOptionsSchema]);

export const noCommonJsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoCommonJsOptionsSchema]);

export const noDefaultExportConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDefaultExportOptionsSchema]);

export const noDescendingSpecificityConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDescendingSpecificityOptionsSchema]);

export const noDoneCallbackConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDoneCallbackOptionsSchema]);

export const noEnumConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoEnumOptionsSchema]);

export const noExportedImportsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoExportedImportsOptionsSchema]);

export const noHeadElementConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoHeadElementOptionsSchema]);

export const noImplicitBooleanConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoImplicitBooleanOptionsSchema]);

export const noInferrableTypesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoInferrableTypesOptionsSchema]);

export const noNamespaceConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNamespaceOptionsSchema]);

export const noNegationElseConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNegationElseOptionsSchema]);

export const noNestedTernaryConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNestedTernaryOptionsSchema]);

export const noNonNullAssertionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoNonNullAssertionOptionsSchema]);

export const noParameterAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoParameterAssignOptionsSchema]);

export const noParameterPropertiesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoParameterPropertiesOptionsSchema]);

export const noProcessEnvConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoProcessEnvOptionsSchema]);

export const noRestrictedGlobalsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRestrictedGlobalsOptionsSchema]);

export const noShoutyConstantsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoShoutyConstantsOptionsSchema]);

export const noSubstrConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSubstrOptionsSchema]);

export const noUnusedTemplateLiteralConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnusedTemplateLiteralOptionsSchema]);

export const noUselessElseConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUselessElseOptionsSchema]);

export const noValueAtRuleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoValueAtRuleOptionsSchema]);

export const noYodaExpressionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoYodaExpressionOptionsSchema]);

export const useArrayLiteralsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseArrayLiteralsOptionsSchema]);

export const useAsConstAssertionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAsConstAssertionOptionsSchema]);

export const useAtIndexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAtIndexOptionsSchema]);

export const useBlockStatementsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseBlockStatementsOptionsSchema]);

export const useCollapsedElseIfConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseCollapsedElseIfOptionsSchema]);

export const useCollapsedIfConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseCollapsedIfOptionsSchema]);

export const useComponentExportOnlyModulesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseComponentExportOnlyModulesOptionsSchema]);

export const useConsistentArrayTypeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseConsistentArrayTypeOptionsSchema]);

export const useConsistentBuiltinInstantiationConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseConsistentBuiltinInstantiationOptionsSchema]);

export const useConsistentCurlyBracesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseConsistentCurlyBracesOptionsSchema]);

export const useConsistentMemberAccessibilityConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseConsistentMemberAccessibilityOptionsSchema]);

export const useConstConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseConstOptionsSchema]);

export const useDefaultParameterLastConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseDefaultParameterLastOptionsSchema]);

export const useDefaultSwitchClauseConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseDefaultSwitchClauseOptionsSchema]);

export const useDeprecatedReasonConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseDeprecatedReasonOptionsSchema]);

export const useEnumInitializersConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseEnumInitializersOptionsSchema]);

export const useExplicitLengthCheckConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseExplicitLengthCheckOptionsSchema]);

export const useExponentiationOperatorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseExponentiationOperatorOptionsSchema]);

export const useExportTypeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseExportTypeOptionsSchema]);

export const useFilenamingConventionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseFilenamingConventionOptionsSchema]);

export const useForOfConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseForOfOptionsSchema]);

export const useFragmentSyntaxConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseFragmentSyntaxOptionsSchema]);

export const useImportTypeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseImportTypeOptionsSchema]);

export const useLiteralEnumMembersConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseLiteralEnumMembersOptionsSchema]);

export const useNodeAssertStrictConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNodeAssertStrictOptionsSchema]);

export const useNodejsImportProtocolConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNodejsImportProtocolOptionsSchema]);

export const useNumberNamespaceConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNumberNamespaceOptionsSchema]);

export const useSelfClosingElementsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseSelfClosingElementsOptionsSchema]);

export const useShorthandAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseShorthandAssignOptionsSchema]);

export const useShorthandFunctionTypeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseShorthandFunctionTypeOptionsSchema]);

export const useSingleVarDeclaratorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseSingleVarDeclaratorOptionsSchema]);

export const useTemplateConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseTemplateOptionsSchema]);

export const useThrowNewErrorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseThrowNewErrorOptionsSchema]);

export const useThrowOnlyErrorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseThrowOnlyErrorOptionsSchema]);

export const useTrimStartEndConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseTrimStartEndOptionsSchema]);

export const noRestrictedImportsOptionsSchema = z.object({
    /**
     * A list of import paths that should trigger the rule.
     */
    paths: z.record(z.string(), customRestrictedImportSchema).optional()
});

export const noRestrictedTypesOptionsSchema = z.object({
    types: z.record(z.string(), customRestrictedTypeSchema).optional()
});

export const noAlertConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAlertOptionsSchema]);

export const noApproximativeNumericConstantConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoApproximativeNumericConstantOptionsSchema]);

export const noArrayIndexKeyConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoArrayIndexKeyOptionsSchema]);

export const noAssignInExpressionsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAssignInExpressionsOptionsSchema]);

export const noAsyncPromiseExecutorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoAsyncPromiseExecutorOptionsSchema]);

export const noCatchAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoCatchAssignOptionsSchema]);

export const noClassAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoClassAssignOptionsSchema]);

export const noCommentTextConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoCommentTextOptionsSchema]);

export const noCompareNegZeroConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoCompareNegZeroOptionsSchema]);

export const noConfusingLabelsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConfusingLabelsOptionsSchema]);

export const noConfusingVoidTypeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConfusingVoidTypeOptionsSchema]);

export const noConsoleConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConsoleOptionsSchema]);

export const noConstEnumConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoConstEnumOptionsSchema]);

export const noControlCharactersInRegexConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoControlCharactersInRegexOptionsSchema]);

export const noDebuggerConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDebuggerOptionsSchema]);

export const noDocumentCookieConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDocumentCookieOptionsSchema]);

export const noDocumentImportInPageConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDocumentImportInPageOptionsSchema]);

export const noDoubleEqualsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDoubleEqualsOptionsSchema]);

export const noDuplicateAtImportRulesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateAtImportRulesOptionsSchema]);

export const noDuplicateCaseConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateCaseOptionsSchema]);

export const noDuplicateClassMembersConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateClassMembersOptionsSchema]);

export const noDuplicateCustomPropertiesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateCustomPropertiesOptionsSchema]);

export const noDuplicateElseIfConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateElseIfOptionsSchema]);

export const noDuplicateFieldsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateFieldsOptionsSchema]);

export const noDuplicateFontNamesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateFontNamesOptionsSchema]);

export const noDuplicateJsxPropsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateJsxPropsOptionsSchema]);

export const noDuplicateObjectKeysConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateObjectKeysOptionsSchema]);

export const noDuplicateParametersConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateParametersOptionsSchema]);

export const noDuplicatePropertiesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicatePropertiesOptionsSchema]);

export const noDuplicateSelectorsKeyframeBlockConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateSelectorsKeyframeBlockOptionsSchema]);

export const noDuplicateTestHooksConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoDuplicateTestHooksOptionsSchema]);

export const noEmptyBlockConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoEmptyBlockOptionsSchema]);

export const noEmptyBlockStatementsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoEmptyBlockStatementsOptionsSchema]);

export const noEmptyInterfaceConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoEmptyInterfaceOptionsSchema]);

export const noEvolvingTypesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoEvolvingTypesOptionsSchema]);

export const noExplicitAnyConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoExplicitAnyOptionsSchema]);

export const noExportsInTestConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoExportsInTestOptionsSchema]);

export const noExtraNonNullAssertionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoExtraNonNullAssertionOptionsSchema]);

export const noFallthroughSwitchClauseConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoFallthroughSwitchClauseOptionsSchema]);

export const noFocusedTestsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoFocusedTestsOptionsSchema]);

export const noFunctionAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoFunctionAssignOptionsSchema]);

export const noGlobalAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoGlobalAssignOptionsSchema]);

export const noGlobalIsFiniteConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoGlobalIsFiniteOptionsSchema]);

export const noGlobalIsNanConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoGlobalIsNanOptionsSchema]);

export const noHeadImportInDocumentConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoHeadImportInDocumentOptionsSchema]);

export const noImplicitAnyLetConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoImplicitAnyLetOptionsSchema]);

export const noImportAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoImportAssignOptionsSchema]);

export const noImportantInKeyframeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoImportantInKeyframeOptionsSchema]);

export const noIrregularWhitespaceConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoIrregularWhitespaceOptionsSchema]);

export const noLabelVarConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoLabelVarOptionsSchema]);

export const noMisleadingCharacterClassConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoMisleadingCharacterClassOptionsSchema]);

export const noMisleadingInstantiatorConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoMisleadingInstantiatorOptionsSchema]);

export const noMisplacedAssertionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoMisplacedAssertionOptionsSchema]);

export const noMisrefactoredShorthandAssignConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoMisrefactoredShorthandAssignOptionsSchema]);

export const noOctalEscapeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoOctalEscapeOptionsSchema]);

export const noPrototypeBuiltinsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoPrototypeBuiltinsOptionsSchema]);

export const noReactSpecificPropsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoReactSpecificPropsOptionsSchema]);

export const noRedeclareConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRedeclareOptionsSchema]);

export const noRedundantUseStrictConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRedundantUseStrictOptionsSchema]);

export const noSelfCompareConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSelfCompareOptionsSchema]);

export const noShadowRestrictedNamesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoShadowRestrictedNamesOptionsSchema]);

export const noShorthandPropertyOverridesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoShorthandPropertyOverridesOptionsSchema]);

export const noSkippedTestsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSkippedTestsOptionsSchema]);

export const noSparseArrayConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSparseArrayOptionsSchema]);

export const noSuspiciousSemicolonInJsxConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoSuspiciousSemicolonInJsxOptionsSchema]);

export const noTemplateCurlyInStringConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoTemplateCurlyInStringOptionsSchema]);

export const noThenPropertyConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoThenPropertyOptionsSchema]);

export const noUnsafeDeclarationMergingConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnsafeDeclarationMergingOptionsSchema]);

export const noUnsafeNegationConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoUnsafeNegationOptionsSchema]);

export const noVarConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoVarOptionsSchema]);

export const noWithConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoWithOptionsSchema]);

export const useAdjacentOverloadSignaturesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAdjacentOverloadSignaturesOptionsSchema]);

export const useAwaitConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseAwaitOptionsSchema]);

export const useDefaultSwitchClauseLastConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseDefaultSwitchClauseLastOptionsSchema]);

export const useErrorMessageConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseErrorMessageOptionsSchema]);

export const useGetterReturnConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseGetterReturnOptionsSchema]);

export const useGoogleFontDisplayConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseGoogleFontDisplayOptionsSchema]);

export const useGuardForInConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseGuardForInOptionsSchema]);

export const useIsArrayConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseIsArrayOptionsSchema]);

export const useNamespaceKeywordConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNamespaceKeywordOptionsSchema]);

export const useNumberToFixedDigitsArgumentConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNumberToFixedDigitsArgumentOptionsSchema]);

export const useStrictModeConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseStrictModeOptionsSchema]);

export const sourceMatcherSchema = z.union([negatablePredefinedSourceMatcherSchema, importSourceGlobSchema]);

export const sourcesMatcherSchema = z.union([sourceMatcherSchema, z.array(sourceMatcherSchema)]);

/**
 * A list of rules that belong to this group
 */
export const a11ySchema = z.object({
    /**
     * Enforce that the accessKey attribute is not used on any HTML element.
     */
    noAccessKey: noAccessKeyConfigurationSchema.optional().nullable(),
    /**
     * Enforce that aria-hidden="true" is not set on focusable elements.
     */
    noAriaHiddenOnFocusable: noAriaHiddenOnFocusableConfigurationSchema.optional().nullable(),
    /**
     * Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.
     */
    noAriaUnsupportedElements: noAriaUnsupportedElementsConfigurationSchema.optional().nullable(),
    /**
     * Enforce that autoFocus prop is not used on elements.
     */
    noAutofocus: noAutofocusConfigurationSchema.optional().nullable(),
    /**
     * Enforces that no distracting elements are used.
     */
    noDistractingElements: noDistractingElementsConfigurationSchema.optional().nullable(),
    /**
     * The scope prop should be used only on \<th> elements.
     */
    noHeaderScope: noHeaderScopeConfigurationSchema.optional().nullable(),
    /**
     * Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements.
     */
    noInteractiveElementToNoninteractiveRole: noInteractiveElementToNoninteractiveRoleConfigurationSchema.optional().nullable(),
    /**
     * Enforce that a label element or component has a text label and an associated input.
     */
    noLabelWithoutControl: noLabelWithoutControlConfigurationSchema.optional().nullable(),
    /**
     * Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements.
     */
    noNoninteractiveElementToInteractiveRole: noNoninteractiveElementToInteractiveRoleConfigurationSchema.optional().nullable(),
    /**
     * Enforce that tabIndex is not assigned to non-interactive HTML elements.
     */
    noNoninteractiveTabindex: noNoninteractiveTabindexConfigurationSchema.optional().nullable(),
    /**
     * Prevent the usage of positive integers on tabIndex property
     */
    noPositiveTabindex: noPositiveTabindexConfigurationSchema.optional().nullable(),
    /**
     * Enforce img alt prop does not contain the word "image", "picture", or "photo".
     */
    noRedundantAlt: noRedundantAltConfigurationSchema.optional().nullable(),
    /**
     * Enforce explicit role property is not the same as implicit/default role property on an element.
     */
    noRedundantRoles: noRedundantRolesConfigurationSchema.optional().nullable(),
    /**
     * Enforce that static, visible elements (such as \<div>) that have click handlers use the valid role attribute.
     */
    noStaticElementInteractions: noStaticElementInteractionsConfigurationSchema.optional().nullable(),
    /**
     * Enforces the usage of the title element for the svg element.
     */
    noSvgWithoutTitle: noSvgWithoutTitleConfigurationSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable(),
    /**
     * Enforce that all elements that require alternative text have meaningful information to relay back to the end user.
     */
    useAltText: useAltTextConfigurationSchema.optional().nullable(),
    /**
     * Enforce that anchors have content and that the content is accessible to screen readers.
     */
    useAnchorContent: useAnchorContentConfigurationSchema.optional().nullable(),
    /**
     * Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant.
     */
    useAriaActivedescendantWithTabindex: useAriaActivedescendantWithTabindexConfigurationSchema.optional().nullable(),
    /**
     * Enforce that elements with ARIA roles must have all required ARIA attributes for that role.
     */
    useAriaPropsForRole: useAriaPropsForRoleConfigurationSchema.optional().nullable(),
    /**
     * Enforce that ARIA properties are valid for the roles that are supported by the element.
     */
    useAriaPropsSupportedByRole: useAriaPropsSupportedByRoleConfigurationSchema.optional().nullable(),
    /**
     * Enforces the usage of the attribute type for the element button
     */
    useButtonType: useButtonTypeConfigurationSchema.optional().nullable(),
    /**
     * Elements with an interactive role and interaction handlers must be focusable.
     */
    useFocusableInteractive: useFocusableInteractiveConfigurationSchema.optional().nullable(),
    /**
     * Disallow a missing generic family keyword within font families.
     */
    useGenericFontNames: useGenericFontNamesConfigurationSchema.optional().nullable(),
    /**
     * Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop.
     */
    useHeadingContent: useHeadingContentConfigurationSchema.optional().nullable(),
    /**
     * Enforce that html element has lang attribute.
     */
    useHtmlLang: useHtmlLangConfigurationSchema.optional().nullable(),
    /**
     * Enforces the usage of the attribute title for the element iframe.
     */
    useIframeTitle: useIframeTitleConfigurationSchema.optional().nullable(),
    /**
     * Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.
     */
    useKeyWithClickEvents: useKeyWithClickEventsConfigurationSchema.optional().nullable(),
    /**
     * Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur.
     */
    useKeyWithMouseEvents: useKeyWithMouseEventsConfigurationSchema.optional().nullable(),
    /**
     * Enforces that audio and video elements must have a track for captions.
     */
    useMediaCaption: useMediaCaptionConfigurationSchema.optional().nullable(),
    /**
     * It detects the use of role attributes in JSX elements and suggests using semantic elements instead.
     */
    useSemanticElements: useSemanticElementsConfigurationSchema.optional().nullable(),
    /**
     * Enforce that all anchors are valid, and they are navigable elements.
     */
    useValidAnchor: useValidAnchorConfigurationSchema.optional().nullable(),
    /**
     * Ensures that ARIA properties aria-* are all valid.
     */
    useValidAriaProps: useValidAriaPropsConfigurationSchema.optional().nullable(),
    /**
     * Elements with ARIA roles must use a valid, non-abstract ARIA role.
     */
    useValidAriaRole: useValidAriaRoleConfigurationSchema.optional().nullable(),
    /**
     * Enforce that ARIA state and property values are valid.
     */
    useValidAriaValues: useValidAriaValuesConfigurationSchema.optional().nullable(),
    /**
     * Use valid values for the autocomplete attribute on input elements.
     */
    useValidAutocomplete: useValidAutocompleteConfigurationSchema.optional().nullable(),
    /**
     * Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country.
     */
    useValidLang: useValidLangConfigurationSchema.optional().nullable()
});

/**
 * A list of rules that belong to this group
 */
export const complexitySchema = z.object({
    /**
     * Disallow unclear usage of consecutive space characters in regular expression literals
     */
    noAdjacentSpacesInRegex: noAdjacentSpacesInRegexConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of arguments.
     */
    noArguments: noArgumentsConfigurationSchema.optional().nullable(),
    /**
     * Disallow primitive type aliases and misleading types.
     */
    noBannedTypes: noBannedTypesConfigurationSchema.optional().nullable(),
    /**
     * Disallow comma operator.
     */
    noCommaOperator: noCommaOperatorConfigurationSchema.optional().nullable(),
    /**
     * Disallow empty type parameters in type aliases and interfaces.
     */
    noEmptyTypeParameters: noEmptyTypeParametersConfigurationSchema.optional().nullable(),
    /**
     * Disallow functions that exceed a given Cognitive Complexity score.
     */
    noExcessiveCognitiveComplexity: noExcessiveCognitiveComplexityConfigurationSchema.optional().nullable(),
    /**
     * This rule enforces a maximum depth to nested describe() in test files.
     */
    noExcessiveNestedTestSuites: noExcessiveNestedTestSuitesConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary boolean casts
     */
    noExtraBooleanCast: noExtraBooleanCastConfigurationSchema.optional().nullable(),
    /**
     * Disallow to use unnecessary callback on flatMap.
     */
    noFlatMapIdentity: noFlatMapIdentityConfigurationSchema.optional().nullable(),
    /**
     * Prefer for...of statement instead of Array.forEach.
     */
    noForEach: noForEachConfigurationSchema.optional().nullable(),
    /**
     * This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace.
     */
    noStaticOnlyClass: noStaticOnlyClassConfigurationSchema.optional().nullable(),
    /**
     * Disallow this and super in static contexts.
     */
    noThisInStatic: noThisInStaticConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary catch clauses.
     */
    noUselessCatch: noUselessCatchConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary constructors.
     */
    noUselessConstructor: noUselessConstructorConfigurationSchema.optional().nullable(),
    /**
     * Avoid using unnecessary continue.
     */
    noUselessContinue: noUselessContinueConfigurationSchema.optional().nullable(),
    /**
     * Disallow empty exports that don't change anything in a module file.
     */
    noUselessEmptyExport: noUselessEmptyExportConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary escape sequence in regular expression literals.
     */
    noUselessEscapeInRegex: noUselessEscapeInRegexConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary fragments
     */
    noUselessFragments: noUselessFragmentsConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary labels.
     */
    noUselessLabel: noUselessLabelConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary nested block statements.
     */
    noUselessLoneBlockStatements: noUselessLoneBlockStatementsConfigurationSchema.optional().nullable(),
    /**
     * Disallow renaming import, export, and destructured assignments to the same name.
     */
    noUselessRename: noUselessRenameConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary concatenation of string or template literals.
     */
    noUselessStringConcat: noUselessStringConcatConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary String.raw function in template string literals without any escape sequence.
     */
    noUselessStringRaw: noUselessStringRawConfigurationSchema.optional().nullable(),
    /**
     * Disallow useless case in switch statements.
     */
    noUselessSwitchCase: noUselessSwitchCaseConfigurationSchema.optional().nullable(),
    /**
     * Disallow ternary operators when simpler alternatives exist.
     */
    noUselessTernary: noUselessTernaryConfigurationSchema.optional().nullable(),
    /**
     * Disallow useless this aliasing.
     */
    noUselessThisAlias: noUselessThisAliasConfigurationSchema.optional().nullable(),
    /**
     * Disallow using any or unknown as type constraint.
     */
    noUselessTypeConstraint: noUselessTypeConstraintConfigurationSchema.optional().nullable(),
    /**
     * Disallow initializing variables to undefined.
     */
    noUselessUndefinedInitialization: noUselessUndefinedInitializationConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of void operators, which is not a familiar operator.
     */
    noVoid: noVoidConfigurationSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable(),
    /**
     * Use arrow functions over function expressions.
     */
    useArrowFunction: useArrowFunctionConfigurationSchema.optional().nullable(),
    /**
     * Use Date.now() to get the number of milliseconds since the Unix Epoch.
     */
    useDateNow: useDateNowConfigurationSchema.optional().nullable(),
    /**
     * Promotes the use of .flatMap() when map().flat() are used together.
     */
    useFlatMap: useFlatMapConfigurationSchema.optional().nullable(),
    /**
     * Enforce the usage of a literal access to properties over computed property access.
     */
    useLiteralKeys: useLiteralKeysConfigurationSchema.optional().nullable(),
    /**
     * Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
     */
    useNumericLiterals: useNumericLiteralsConfigurationSchema.optional().nullable(),
    /**
     * Enforce using concise optional chain instead of chained logical expressions.
     */
    useOptionalChain: useOptionalChainConfigurationSchema.optional().nullable(),
    /**
     * Enforce the use of the regular expression literals instead of the RegExp constructor if possible.
     */
    useRegexLiterals: useRegexLiteralsConfigurationSchema.optional().nullable(),
    /**
     * Disallow number literal object member names which are not base 10 or use underscore as separator.
     */
    useSimpleNumberKeys: useSimpleNumberKeysConfigurationSchema.optional().nullable(),
    /**
     * Discard redundant terms from logical expressions.
     */
    useSimplifiedLogicExpression: useSimplifiedLogicExpressionConfigurationSchema.optional().nullable(),
    /**
     * Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed.
     */
    useWhile: useWhileConfigurationSchema.optional().nullable()
});

export const ruleWithUseExhaustiveDependenciesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useExhaustiveDependenciesOptionsSchema.optional()
});

export const ruleWithNoRestrictedElementsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRestrictedElementsOptionsSchema.optional()
});

/**
 * A list of rules that belong to this group
 */
export const performanceSchema = z.object({
    /**
     * Disallow the use of spread (...) syntax on accumulators.
     */
    noAccumulatingSpread: noAccumulatingSpreadConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of barrel file.
     */
    noBarrelFile: noBarrelFileConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of the delete operator.
     */
    noDelete: noDeleteConfigurationSchema.optional().nullable(),
    /**
     * Disallow accessing namespace imports dynamically.
     */
    noDynamicNamespaceImportAccess: noDynamicNamespaceImportAccessConfigurationSchema.optional().nullable(),
    /**
     * Prevent usage of \<img> element in a Next.js project.
     */
    noImgElement: noImgElementConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of namespace imports.
     */
    noNamespaceImport: noNamespaceImportConfigurationSchema.optional().nullable(),
    /**
     * Avoid re-export all.
     */
    noReExportAll: noReExportAllConfigurationSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable(),
    /**
     * Require regex literals to be declared at the top level.
     */
    useTopLevelRegex: useTopLevelRegexConfigurationSchema.optional().nullable()
});

/**
 * A list of rules that belong to this group
 */
export const securitySchema = z.object({
    /**
     * Disallow target="_blank" attribute without rel="noopener".
     */
    noBlankTarget: noBlankTargetConfigurationSchema.optional().nullable(),
    /**
     * Prevent the usage of dangerous JSX props
     */
    noDangerouslySetInnerHtml: noDangerouslySetInnerHtmlConfigurationSchema.optional().nullable(),
    /**
     * Report when a DOM element or a component uses both children and dangerouslySetInnerHTML prop.
     */
    noDangerouslySetInnerHtmlWithChildren: noDangerouslySetInnerHtmlWithChildrenConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of global eval().
     */
    noGlobalEval: noGlobalEvalConfigurationSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable()
});

export const ruleWithNoRestrictedImportsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRestrictedImportsOptionsSchema.optional()
});

export const ruleWithNoRestrictedTypesOptionsSchema = z.object({
    /**
     * The kind of the code actions emitted by the rule
     */
    fix: fixKindSchema.optional().nullable(),
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: noRestrictedTypesOptionsSchema.optional()
});

/**
 * A list of rules that belong to this group
 */
export const suspiciousSchema = z.object({
    /**
     * Disallow the use of alert, confirm, and prompt.
     */
    noAlert: noAlertConfigurationSchema.optional().nullable(),
    /**
     * Use standard constants instead of approximated literals.
     */
    noApproximativeNumericConstant: noApproximativeNumericConstantConfigurationSchema.optional().nullable(),
    /**
     * Discourage the usage of Array index in keys.
     */
    noArrayIndexKey: noArrayIndexKeyConfigurationSchema.optional().nullable(),
    /**
     * Disallow assignments in expressions.
     */
    noAssignInExpressions: noAssignInExpressionsConfigurationSchema.optional().nullable(),
    /**
     * Disallows using an async function as a Promise executor.
     */
    noAsyncPromiseExecutor: noAsyncPromiseExecutorConfigurationSchema.optional().nullable(),
    /**
     * Disallow reassigning exceptions in catch clauses.
     */
    noCatchAssign: noCatchAssignConfigurationSchema.optional().nullable(),
    /**
     * Disallow reassigning class members.
     */
    noClassAssign: noClassAssignConfigurationSchema.optional().nullable(),
    /**
     * Prevent comments from being inserted as text nodes
     */
    noCommentText: noCommentTextConfigurationSchema.optional().nullable(),
    /**
     * Disallow comparing against -0
     */
    noCompareNegZero: noCompareNegZeroConfigurationSchema.optional().nullable(),
    /**
     * Disallow labeled statements that are not loops.
     */
    noConfusingLabels: noConfusingLabelsConfigurationSchema.optional().nullable(),
    /**
     * Disallow void type outside of generic or return types.
     */
    noConfusingVoidType: noConfusingVoidTypeConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of console.
     */
    noConsole: noConsoleConfigurationSchema.optional().nullable(),
    /**
     * Disallow TypeScript const enum
     */
    noConstEnum: noConstEnumConfigurationSchema.optional().nullable(),
    /**
     * Prevents from having control characters and some escape sequences that match control characters in regular expression literals.
     */
    noControlCharactersInRegex: noControlCharactersInRegexConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of debugger
     */
    noDebugger: noDebuggerConfigurationSchema.optional().nullable(),
    /**
     * Disallow direct assignments to document.cookie.
     */
    noDocumentCookie: noDocumentCookieConfigurationSchema.optional().nullable(),
    /**
     * Prevents importing next/document outside of pages/_document.jsx in Next.js projects.
     */
    noDocumentImportInPage: noDocumentImportInPageConfigurationSchema.optional().nullable(),
    /**
     * Require the use of === and !==.
     */
    noDoubleEquals: noDoubleEqualsConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate @import rules.
     */
    noDuplicateAtImportRules: noDuplicateAtImportRulesConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate case labels.
     */
    noDuplicateCase: noDuplicateCaseConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate class members.
     */
    noDuplicateClassMembers: noDuplicateClassMembersConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate custom properties within declaration blocks.
     */
    noDuplicateCustomProperties: noDuplicateCustomPropertiesConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate conditions in if-else-if chains
     */
    noDuplicateElseIf: noDuplicateElseIfConfigurationSchema.optional().nullable(),
    /**
     * No duplicated fields in GraphQL operations.
     */
    noDuplicateFields: noDuplicateFieldsConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate names within font families.
     */
    noDuplicateFontNames: noDuplicateFontNamesConfigurationSchema.optional().nullable(),
    /**
     * Prevents JSX properties to be assigned multiple times.
     */
    noDuplicateJsxProps: noDuplicateJsxPropsConfigurationSchema.optional().nullable(),
    /**
     * Disallow two keys with the same name inside objects.
     */
    noDuplicateObjectKeys: noDuplicateObjectKeysConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate function parameter name.
     */
    noDuplicateParameters: noDuplicateParametersConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate properties within declaration blocks.
     */
    noDuplicateProperties: noDuplicatePropertiesConfigurationSchema.optional().nullable(),
    /**
     * Disallow duplicate selectors within keyframe blocks.
     */
    noDuplicateSelectorsKeyframeBlock: noDuplicateSelectorsKeyframeBlockConfigurationSchema.optional().nullable(),
    /**
     * A describe block should not contain duplicate hooks.
     */
    noDuplicateTestHooks: noDuplicateTestHooksConfigurationSchema.optional().nullable(),
    /**
     * Disallow CSS empty blocks.
     */
    noEmptyBlock: noEmptyBlockConfigurationSchema.optional().nullable(),
    /**
     * Disallow empty block statements and static blocks.
     */
    noEmptyBlockStatements: noEmptyBlockStatementsConfigurationSchema.optional().nullable(),
    /**
     * Disallow the declaration of empty interfaces.
     */
    noEmptyInterface: noEmptyInterfaceConfigurationSchema.optional().nullable(),
    /**
     * Disallow variables from evolving into any type through reassignments.
     */
    noEvolvingTypes: noEvolvingTypesConfigurationSchema.optional().nullable(),
    /**
     * Disallow the any type usage.
     */
    noExplicitAny: noExplicitAnyConfigurationSchema.optional().nullable(),
    /**
     * Disallow using export or module.exports in files containing tests
     */
    noExportsInTest: noExportsInTestConfigurationSchema.optional().nullable(),
    /**
     * Prevents the wrong usage of the non-null assertion operator (!) in TypeScript files.
     */
    noExtraNonNullAssertion: noExtraNonNullAssertionConfigurationSchema.optional().nullable(),
    /**
     * Disallow fallthrough of switch clauses.
     */
    noFallthroughSwitchClause: noFallthroughSwitchClauseConfigurationSchema.optional().nullable(),
    /**
     * Disallow focused tests.
     */
    noFocusedTests: noFocusedTestsConfigurationSchema.optional().nullable(),
    /**
     * Disallow reassigning function declarations.
     */
    noFunctionAssign: noFunctionAssignConfigurationSchema.optional().nullable(),
    /**
     * Disallow assignments to native objects and read-only global variables.
     */
    noGlobalAssign: noGlobalAssignConfigurationSchema.optional().nullable(),
    /**
     * Use Number.isFinite instead of global isFinite.
     */
    noGlobalIsFinite: noGlobalIsFiniteConfigurationSchema.optional().nullable(),
    /**
     * Use Number.isNaN instead of global isNaN.
     */
    noGlobalIsNan: noGlobalIsNanConfigurationSchema.optional().nullable(),
    /**
     * Prevent using the next/head module in pages/_document.js on Next.js projects.
     */
    noHeadImportInDocument: noHeadImportInDocumentConfigurationSchema.optional().nullable(),
    /**
     * Disallow use of implicit any type on variable declarations.
     */
    noImplicitAnyLet: noImplicitAnyLetConfigurationSchema.optional().nullable(),
    /**
     * Disallow assigning to imported bindings
     */
    noImportAssign: noImportAssignConfigurationSchema.optional().nullable(),
    /**
     * Disallow invalid !important within keyframe declarations
     */
    noImportantInKeyframe: noImportantInKeyframeConfigurationSchema.optional().nullable(),
    /**
     * Disallows the use of irregular whitespace characters.
     */
    noIrregularWhitespace: noIrregularWhitespaceConfigurationSchema.optional().nullable(),
    /**
     * Disallow labels that share a name with a variable
     */
    noLabelVar: noLabelVarConfigurationSchema.optional().nullable(),
    /**
     * Disallow characters made with multiple code points in character class syntax.
     */
    noMisleadingCharacterClass: noMisleadingCharacterClassConfigurationSchema.optional().nullable(),
    /**
     * Enforce proper usage of new and constructor.
     */
    noMisleadingInstantiator: noMisleadingInstantiatorConfigurationSchema.optional().nullable(),
    /**
     * Checks that the assertion function, for example expect, is placed inside an it() function call.
     */
    noMisplacedAssertion: noMisplacedAssertionConfigurationSchema.optional().nullable(),
    /**
     * Disallow shorthand assign when variable appears on both sides.
     */
    noMisrefactoredShorthandAssign: noMisrefactoredShorthandAssignConfigurationSchema.optional().nullable(),
    /**
     * Disallow octal escape sequences in string literals
     */
    noOctalEscape: noOctalEscapeConfigurationSchema.optional().nullable(),
    /**
     * Disallow direct use of Object.prototype builtins.
     */
    noPrototypeBuiltins: noPrototypeBuiltinsConfigurationSchema.optional().nullable(),
    /**
     * Prevents React-specific JSX properties from being used.
     */
    noReactSpecificProps: noReactSpecificPropsConfigurationSchema.optional().nullable(),
    /**
     * Disallow variable, function, class, and type redeclarations in the same scope.
     */
    noRedeclare: noRedeclareConfigurationSchema.optional().nullable(),
    /**
     * Prevents from having redundant "use strict".
     */
    noRedundantUseStrict: noRedundantUseStrictConfigurationSchema.optional().nullable(),
    /**
     * Disallow comparisons where both sides are exactly the same.
     */
    noSelfCompare: noSelfCompareConfigurationSchema.optional().nullable(),
    /**
     * Disallow identifiers from shadowing restricted names.
     */
    noShadowRestrictedNames: noShadowRestrictedNamesConfigurationSchema.optional().nullable(),
    /**
     * Disallow shorthand properties that override related longhand properties.
     */
    noShorthandPropertyOverrides: noShorthandPropertyOverridesConfigurationSchema.optional().nullable(),
    /**
     * Disallow disabled tests.
     */
    noSkippedTests: noSkippedTestsConfigurationSchema.optional().nullable(),
    /**
     * Prevents the use of sparse arrays (arrays with holes).
     */
    noSparseArray: noSparseArrayConfigurationSchema.optional().nullable(),
    /**
     * It detects possible "wrong" semicolons inside JSX elements.
     */
    noSuspiciousSemicolonInJsx: noSuspiciousSemicolonInJsxConfigurationSchema.optional().nullable(),
    /**
     * Disallow template literal placeholder syntax in regular strings.
     */
    noTemplateCurlyInString: noTemplateCurlyInStringConfigurationSchema.optional().nullable(),
    /**
     * Disallow then property.
     */
    noThenProperty: noThenPropertyConfigurationSchema.optional().nullable(),
    /**
     * Disallow unsafe declaration merging between interfaces and classes.
     */
    noUnsafeDeclarationMerging: noUnsafeDeclarationMergingConfigurationSchema.optional().nullable(),
    /**
     * Disallow using unsafe negation.
     */
    noUnsafeNegation: noUnsafeNegationConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of var
     */
    noVar: noVarConfigurationSchema.optional().nullable(),
    /**
     * Disallow with statements in non-strict contexts.
     */
    noWith: noWithConfigurationSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable(),
    /**
     * Disallow the use of overload signatures that are not next to each other.
     */
    useAdjacentOverloadSignatures: useAdjacentOverloadSignaturesConfigurationSchema.optional().nullable(),
    /**
     * Ensure async functions utilize await.
     */
    useAwait: useAwaitConfigurationSchema.optional().nullable(),
    /**
     * Enforce default clauses in switch statements to be last
     */
    useDefaultSwitchClauseLast: useDefaultSwitchClauseLastConfigurationSchema.optional().nullable(),
    /**
     * Enforce passing a message value when creating a built-in error.
     */
    useErrorMessage: useErrorMessageConfigurationSchema.optional().nullable(),
    /**
     * Enforce get methods to always return a value.
     */
    useGetterReturn: useGetterReturnConfigurationSchema.optional().nullable(),
    /**
     * Enforces the use of a recommended display strategy with Google Fonts.
     */
    useGoogleFontDisplay: useGoogleFontDisplayConfigurationSchema.optional().nullable(),
    /**
     * Require for-in loops to include an if statement.
     */
    useGuardForIn: useGuardForInConfigurationSchema.optional().nullable(),
    /**
     * Use Array.isArray() instead of instanceof Array.
     */
    useIsArray: useIsArrayConfigurationSchema.optional().nullable(),
    /**
     * Require using the namespace keyword over the module keyword to declare TypeScript namespaces.
     */
    useNamespaceKeyword: useNamespaceKeywordConfigurationSchema.optional().nullable(),
    /**
     * Enforce using the digits argument with Number#toFixed().
     */
    useNumberToFixedDigitsArgument: useNumberToFixedDigitsArgumentConfigurationSchema.optional().nullable(),
    /**
     * Enforce the use of the directive "use strict" in script files.
     */
    useStrictMode: useStrictModeConfigurationSchema.optional().nullable()
});

export const importMatcherSchema = z.record(z.string(), z.unknown()).and(z.object({
    source: sourcesMatcherSchema.optional().nullable(),
    type: z.boolean().optional().nullable()
}));

export const severityOrGroupForA11YSchema = z.union([groupPlainConfigurationSchema, a11ySchema]);

export const severityOrGroupForComplexitySchema = z.union([groupPlainConfigurationSchema, complexitySchema]);

export const severityOrGroupForPerformanceSchema = z.union([groupPlainConfigurationSchema, performanceSchema]);

export const severityOrGroupForSecuritySchema = z.union([groupPlainConfigurationSchema, securitySchema]);

export const severityOrGroupForSuspiciousSchema = z.union([groupPlainConfigurationSchema, suspiciousSchema]);

export const useExhaustiveDependenciesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseExhaustiveDependenciesOptionsSchema]);

export const noRestrictedElementsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRestrictedElementsOptionsSchema]);

/**
 * Rule's options.
 */
export const useNamingConventionOptionsSchema = z.object({
    /**
     * Custom conventions.
     */
    conventions: z.array(conventionSchema).optional(),
    /**
     * If `false`, then non-ASCII characters are allowed.
     */
    requireAscii: z.boolean().optional(),
    /**
     * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
     */
    strictCase: z.boolean().optional()
});

export const noRestrictedImportsConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRestrictedImportsOptionsSchema]);

export const noRestrictedTypesConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithNoRestrictedTypesOptionsSchema]);

export const groupMatcherSchema = z.union([importMatcherSchema, sourceMatcherSchema]);

export const importGroupSchema = z.union([groupMatcherSchema, z.array(groupMatcherSchema)]).nullable();

/**
 * A list of rules that belong to this group
 */
export const correctnessSchema = z.object({
    /**
     * Prevent passing of children as props.
     */
    noChildrenProp: noChildrenPropConfigurationSchema.optional().nullable(),
    /**
     * Prevents from having const variables being re-assigned.
     */
    noConstAssign: noConstAssignConfigurationSchema.optional().nullable(),
    /**
     * Disallow constant expressions in conditions
     */
    noConstantCondition: noConstantConditionConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of Math.min and Math.max to clamp a value where the result itself is constant.
     */
    noConstantMathMinMaxClamp: noConstantMathMinMaxClampConfigurationSchema.optional().nullable(),
    /**
     * Disallow returning a value from a constructor.
     */
    noConstructorReturn: noConstructorReturnConfigurationSchema.optional().nullable(),
    /**
     * Disallow empty character classes in regular expression literals.
     */
    noEmptyCharacterClassInRegex: noEmptyCharacterClassInRegexConfigurationSchema.optional().nullable(),
    /**
     * Disallows empty destructuring patterns.
     */
    noEmptyPattern: noEmptyPatternConfigurationSchema.optional().nullable(),
    /**
     * Disallow calling global object properties as functions
     */
    noGlobalObjectCalls: noGlobalObjectCallsConfigurationSchema.optional().nullable(),
    /**
     * Disallow function and var declarations that are accessible outside their block.
     */
    noInnerDeclarations: noInnerDeclarationsConfigurationSchema.optional().nullable(),
    /**
     * Ensure that builtins are correctly instantiated.
     */
    noInvalidBuiltinInstantiation: noInvalidBuiltinInstantiationConfigurationSchema.optional().nullable(),
    /**
     * Prevents the incorrect use of super() inside classes. It also checks whether a call super() is missing from classes that extends other constructors.
     */
    noInvalidConstructorSuper: noInvalidConstructorSuperConfigurationSchema.optional().nullable(),
    /**
     * Disallow non-standard direction values for linear gradient functions.
     */
    noInvalidDirectionInLinearGradient: noInvalidDirectionInLinearGradientConfigurationSchema.optional().nullable(),
    /**
     * Disallows invalid named grid areas in CSS Grid Layouts.
     */
    noInvalidGridAreas: noInvalidGridAreasConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of @import at-rules in invalid positions.
     */
    noInvalidPositionAtImportRule: noInvalidPositionAtImportRuleConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of variables and function parameters before their declaration
     */
    noInvalidUseBeforeDeclaration: noInvalidUseBeforeDeclarationConfigurationSchema.optional().nullable(),
    /**
     * Disallow missing var function for css variables.
     */
    noMissingVarFunction: noMissingVarFunctionConfigurationSchema.optional().nullable(),
    /**
     * Forbid the use of Node.js builtin modules.
     */
    noNodejsModules: noNodejsModulesConfigurationSchema.optional().nullable(),
    /**
     * Disallow \8 and \9 escape sequences in string literals.
     */
    noNonoctalDecimalEscape: noNonoctalDecimalEscapeConfigurationSchema.optional().nullable(),
    /**
     * Disallow literal numbers that lose precision
     */
    noPrecisionLoss: noPrecisionLossConfigurationSchema.optional().nullable(),
    /**
     * Restrict imports of private exports.
     */
    noPrivateImports: noPrivateImportsConfigurationSchema.optional().nullable(),
    /**
     * Prevent the usage of the return value of React.render.
     */
    noRenderReturnValue: noRenderReturnValueConfigurationSchema.optional().nullable(),
    /**
     * Disallow assignments where both sides are exactly the same.
     */
    noSelfAssign: noSelfAssignConfigurationSchema.optional().nullable(),
    /**
     * Disallow returning a value from a setter
     */
    noSetterReturn: noSetterReturnConfigurationSchema.optional().nullable(),
    /**
     * Disallow comparison of expressions modifying the string case with non-compliant value.
     */
    noStringCaseMismatch: noStringCaseMismatchConfigurationSchema.optional().nullable(),
    /**
     * Disallow lexical declarations in switch clauses.
     */
    noSwitchDeclarations: noSwitchDeclarationsConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of dependencies that aren't specified in the package.json.
     */
    noUndeclaredDependencies: noUndeclaredDependenciesConfigurationSchema.optional().nullable(),
    /**
     * Prevents the usage of variables that haven't been declared inside the document.
     */
    noUndeclaredVariables: noUndeclaredVariablesConfigurationSchema.optional().nullable(),
    /**
     * Disallow unknown CSS value functions.
     */
    noUnknownFunction: noUnknownFunctionConfigurationSchema.optional().nullable(),
    /**
     * Disallow unknown media feature names.
     */
    noUnknownMediaFeatureName: noUnknownMediaFeatureNameConfigurationSchema.optional().nullable(),
    /**
     * Disallow unknown properties.
     */
    noUnknownProperty: noUnknownPropertyConfigurationSchema.optional().nullable(),
    /**
     * Disallow unknown pseudo-class selectors.
     */
    noUnknownPseudoClass: noUnknownPseudoClassConfigurationSchema.optional().nullable(),
    /**
     * Disallow unknown pseudo-element selectors.
     */
    noUnknownPseudoElement: noUnknownPseudoElementConfigurationSchema.optional().nullable(),
    /**
     * Disallow unknown type selectors.
     */
    noUnknownTypeSelector: noUnknownTypeSelectorConfigurationSchema.optional().nullable(),
    /**
     * Disallow unknown CSS units.
     */
    noUnknownUnit: noUnknownUnitConfigurationSchema.optional().nullable(),
    /**
     * Disallow unmatchable An+B selectors.
     */
    noUnmatchableAnbSelector: noUnmatchableAnbSelectorConfigurationSchema.optional().nullable(),
    /**
     * Disallow unreachable code
     */
    noUnreachable: noUnreachableConfigurationSchema.optional().nullable(),
    /**
     * Ensures the super() constructor is called exactly once on every code  path in a class constructor before this is accessed if the class has a superclass
     */
    noUnreachableSuper: noUnreachableSuperConfigurationSchema.optional().nullable(),
    /**
     * Disallow control flow statements in finally blocks.
     */
    noUnsafeFinally: noUnsafeFinallyConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of optional chaining in contexts where the undefined value is not allowed.
     */
    noUnsafeOptionalChaining: noUnsafeOptionalChainingConfigurationSchema.optional().nullable(),
    /**
     * Disallow unused function parameters.
     */
    noUnusedFunctionParameters: noUnusedFunctionParametersConfigurationSchema.optional().nullable(),
    /**
     * Disallow unused imports.
     */
    noUnusedImports: noUnusedImportsConfigurationSchema.optional().nullable(),
    /**
     * Disallow unused labels.
     */
    noUnusedLabels: noUnusedLabelsConfigurationSchema.optional().nullable(),
    /**
     * Disallow unused private class members
     */
    noUnusedPrivateClassMembers: noUnusedPrivateClassMembersConfigurationSchema.optional().nullable(),
    /**
     * Disallow unused variables.
     */
    noUnusedVariables: noUnusedVariablesConfigurationSchema.optional().nullable(),
    /**
     * This rules prevents void elements (AKA self-closing elements) from having children.
     */
    noVoidElementsWithChildren: noVoidElementsWithChildrenConfigurationSchema.optional().nullable(),
    /**
     * Disallow returning a value from a function with the return type 'void'
     */
    noVoidTypeReturn: noVoidTypeReturnConfigurationSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable(),
    /**
     * Enforce all dependencies are correctly specified in a React hook.
     */
    useExhaustiveDependencies: useExhaustiveDependenciesConfigurationSchema.optional().nullable(),
    /**
     * Enforce that all React hooks are being called from the Top Level component functions.
     */
    useHookAtTopLevel: useHookAtTopLevelConfigurationSchema.optional().nullable(),
    /**
     * Enforce file extensions for relative imports.
     */
    useImportExtensions: useImportExtensionsConfigurationSchema.optional().nullable(),
    /**
     * Require calls to isNaN() when checking for NaN.
     */
    useIsNan: useIsNanConfigurationSchema.optional().nullable(),
    /**
     * Disallow missing key props in iterators/collection literals.
     */
    useJsxKeyInIterable: useJsxKeyInIterableConfigurationSchema.optional().nullable(),
    /**
     * Enforce "for" loop update clause moving the counter in the right direction.
     */
    useValidForDirection: useValidForDirectionConfigurationSchema.optional().nullable(),
    /**
     * This rule checks that the result of a typeof expression is compared to a valid value.
     */
    useValidTypeof: useValidTypeofConfigurationSchema.optional().nullable(),
    /**
     * Require generator functions to contain yield.
     */
    useYield: useYieldConfigurationSchema.optional().nullable()
});

export const ruleWithUseNamingConventionOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: rulePlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: useNamingConventionOptionsSchema.optional()
});

export const importGroupsSchema = z.array(importGroupSchema);

export const severityOrGroupForCorrectnessSchema = z.union([groupPlainConfigurationSchema, correctnessSchema]);

export const useNamingConventionConfigurationSchema = z.union([rulePlainConfigurationSchema, ruleWithUseNamingConventionOptionsSchema]);

/**
 * A list of rules that belong to this group
 */
export const styleSchema = z.object({
    /**
     * Disallow use of CommonJs module system in favor of ESM style imports.
     */
    noCommonJs: noCommonJsConfigurationSchema.optional().nullable(),
    /**
     * Disallow default exports.
     */
    noDefaultExport: noDefaultExportConfigurationSchema.optional().nullable(),
    /**
     * Disallow a lower specificity selector from coming after a higher specificity selector.
     */
    noDescendingSpecificity: noDescendingSpecificityConfigurationSchema.optional().nullable(),
    /**
     * Disallow using a callback in asynchronous tests and hooks.
     */
    noDoneCallback: noDoneCallbackConfigurationSchema.optional().nullable(),
    /**
     * Disallow TypeScript enum.
     */
    noEnum: noEnumConfigurationSchema.optional().nullable(),
    /**
     * Disallow exporting an imported variable.
     */
    noExportedImports: noExportedImportsConfigurationSchema.optional().nullable(),
    /**
     * Prevent usage of \<head> element in a Next.js project.
     */
    noHeadElement: noHeadElementConfigurationSchema.optional().nullable(),
    /**
     * Disallow implicit true values on JSX boolean attributes
     */
    noImplicitBoolean: noImplicitBooleanConfigurationSchema.optional().nullable(),
    /**
     * Disallow type annotations for variables, parameters, and class properties initialized with a literal expression.
     */
    noInferrableTypes: noInferrableTypesConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of TypeScript's namespaces.
     */
    noNamespace: noNamespaceConfigurationSchema.optional().nullable(),
    /**
     * Disallow negation in the condition of an if statement if it has an else clause.
     */
    noNegationElse: noNegationElseConfigurationSchema.optional().nullable(),
    /**
     * Disallow nested ternary expressions.
     */
    noNestedTernary: noNestedTernaryConfigurationSchema.optional().nullable(),
    /**
     * Disallow non-null assertions using the ! postfix operator.
     */
    noNonNullAssertion: noNonNullAssertionConfigurationSchema.optional().nullable(),
    /**
     * Disallow reassigning function parameters.
     */
    noParameterAssign: noParameterAssignConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of parameter properties in class constructors.
     */
    noParameterProperties: noParameterPropertiesConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of process.env.
     */
    noProcessEnv: noProcessEnvConfigurationSchema.optional().nullable(),
    /**
     * This rule allows you to specify global variable names that you don’t want to use in your application.
     */
    noRestrictedGlobals: noRestrictedGlobalsConfigurationSchema.optional().nullable(),
    /**
     * Disallow specified modules when loaded by import or require.
     */
    noRestrictedImports: noRestrictedImportsConfigurationSchema.optional().nullable(),
    /**
     * Disallow user defined types.
     */
    noRestrictedTypes: noRestrictedTypesConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of constants which its value is the upper-case version of its name.
     */
    noShoutyConstants: noShoutyConstantsConfigurationSchema.optional().nullable(),
    /**
     * Enforce the use of String.slice() over String.substr() and String.substring().
     */
    noSubstr: noSubstrConfigurationSchema.optional().nullable(),
    /**
     * Disallow template literals if interpolation and special-character handling are not needed
     */
    noUnusedTemplateLiteral: noUnusedTemplateLiteralConfigurationSchema.optional().nullable(),
    /**
     * Disallow else block when the if block breaks early.
     */
    noUselessElse: noUselessElseConfigurationSchema.optional().nullable(),
    /**
     * Disallow use of @value rule in css modules.
     */
    noValueAtRule: noValueAtRuleConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of yoda expressions.
     */
    noYodaExpression: noYodaExpressionConfigurationSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable(),
    /**
     * Disallow Array constructors.
     */
    useArrayLiterals: useArrayLiteralsConfigurationSchema.optional().nullable(),
    /**
     * Enforce the use of as const over literal type and type annotation.
     */
    useAsConstAssertion: useAsConstAssertionConfigurationSchema.optional().nullable(),
    /**
     * Use at() instead of integer index access.
     */
    useAtIndex: useAtIndexConfigurationSchema.optional().nullable(),
    /**
     * Requires following curly brace conventions.
     */
    useBlockStatements: useBlockStatementsConfigurationSchema.optional().nullable(),
    /**
     * Enforce using else if instead of nested if in else clauses.
     */
    useCollapsedElseIf: useCollapsedElseIfConfigurationSchema.optional().nullable(),
    /**
     * Enforce using single if instead of nested if clauses.
     */
    useCollapsedIf: useCollapsedIfConfigurationSchema.optional().nullable(),
    /**
     * Enforce declaring components only within modules that export React Components exclusively.
     */
    useComponentExportOnlyModules: useComponentExportOnlyModulesConfigurationSchema.optional().nullable(),
    /**
     * Require consistently using either T\[] or Array\<T>
     */
    useConsistentArrayType: useConsistentArrayTypeConfigurationSchema.optional().nullable(),
    /**
     * Enforce the use of new for all builtins, except String, Number and Boolean.
     */
    useConsistentBuiltinInstantiation: useConsistentBuiltinInstantiationConfigurationSchema.optional().nullable(),
    /**
     * This rule enforces consistent use of curly braces inside JSX attributes and JSX children.
     */
    useConsistentCurlyBraces: useConsistentCurlyBracesConfigurationSchema.optional().nullable(),
    /**
     * Require consistent accessibility modifiers on class properties and methods.
     */
    useConsistentMemberAccessibility: useConsistentMemberAccessibilityConfigurationSchema.optional().nullable(),
    /**
     * Require const declarations for variables that are only assigned once.
     */
    useConst: useConstConfigurationSchema.optional().nullable(),
    /**
     * Enforce default function parameters and optional function parameters to be last.
     */
    useDefaultParameterLast: useDefaultParameterLastConfigurationSchema.optional().nullable(),
    /**
     * Require the default clause in switch statements.
     */
    useDefaultSwitchClause: useDefaultSwitchClauseConfigurationSchema.optional().nullable(),
    /**
     * Require specifying the reason argument when using @deprecated directive
     */
    useDeprecatedReason: useDeprecatedReasonConfigurationSchema.optional().nullable(),
    /**
     * Require that each enum member value be explicitly initialized.
     */
    useEnumInitializers: useEnumInitializersConfigurationSchema.optional().nullable(),
    /**
     * Enforce explicitly comparing the length, size, byteLength or byteOffset property of a value.
     */
    useExplicitLengthCheck: useExplicitLengthCheckConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of Math.pow in favor of the ** operator.
     */
    useExponentiationOperator: useExponentiationOperatorConfigurationSchema.optional().nullable(),
    /**
     * Promotes the use of export type for types.
     */
    useExportType: useExportTypeConfigurationSchema.optional().nullable(),
    /**
     * Enforce naming conventions for JavaScript and TypeScript filenames.
     */
    useFilenamingConvention: useFilenamingConventionConfigurationSchema.optional().nullable(),
    /**
     * This rule recommends a for-of loop when in a for loop, the index used to extract an item from the iterated array.
     */
    useForOf: useForOfConfigurationSchema.optional().nullable(),
    /**
     * This rule enforces the use of \<>...\</> over \<Fragment>...\</Fragment>.
     */
    useFragmentSyntax: useFragmentSyntaxConfigurationSchema.optional().nullable(),
    /**
     * Promotes the use of import type for types.
     */
    useImportType: useImportTypeConfigurationSchema.optional().nullable(),
    /**
     * Require all enum members to be literal values.
     */
    useLiteralEnumMembers: useLiteralEnumMembersConfigurationSchema.optional().nullable(),
    /**
     * Enforce naming conventions for everything across a codebase.
     */
    useNamingConvention: useNamingConventionConfigurationSchema.optional().nullable(),
    /**
     * Promotes the usage of node:assert/strict over node:assert.
     */
    useNodeAssertStrict: useNodeAssertStrictConfigurationSchema.optional().nullable(),
    /**
     * Enforces using the node: protocol for Node.js builtin modules.
     */
    useNodejsImportProtocol: useNodejsImportProtocolConfigurationSchema.optional().nullable(),
    /**
     * Use the Number properties instead of global ones.
     */
    useNumberNamespace: useNumberNamespaceConfigurationSchema.optional().nullable(),
    /**
     * Prevent extra closing tags for components without children.
     */
    useSelfClosingElements: useSelfClosingElementsConfigurationSchema.optional().nullable(),
    /**
     * Require assignment operator shorthand where possible.
     */
    useShorthandAssign: useShorthandAssignConfigurationSchema.optional().nullable(),
    /**
     * Enforce using function types instead of object type with call signatures.
     */
    useShorthandFunctionType: useShorthandFunctionTypeConfigurationSchema.optional().nullable(),
    /**
     * Disallow multiple variable declarations in the same variable statement
     */
    useSingleVarDeclarator: useSingleVarDeclaratorConfigurationSchema.optional().nullable(),
    /**
     * Prefer template literals over string concatenation.
     */
    useTemplate: useTemplateConfigurationSchema.optional().nullable(),
    /**
     * Require new when throwing an error.
     */
    useThrowNewError: useThrowNewErrorConfigurationSchema.optional().nullable(),
    /**
     * Disallow throwing non-Error values.
     */
    useThrowOnlyError: useThrowOnlyErrorConfigurationSchema.optional().nullable(),
    /**
     * Enforce the use of String.trimStart() and String.trimEnd() over String.trimLeft() and String.trimRight().
     */
    useTrimStartEnd: useTrimStartEndConfigurationSchema.optional().nullable()
});

/**
 * A list of rules that belong to this group
 */
export const nurserySchema = z.object({
    /**
     * Disallow await inside loops.
     */
    noAwaitInLoop: noAwaitInLoopConfigurationSchema.optional().nullable(),
    /**
     * Disallow bitwise operators.
     */
    noBitwiseOperators: noBitwiseOperatorsConfigurationSchema.optional().nullable(),
    /**
     * Disallow expressions where the operation doesn't affect the value
     */
    noConstantBinaryExpression: noConstantBinaryExpressionConfigurationSchema.optional().nullable(),
    /**
     * Disallow destructuring props inside JSX components in Solid projects.
     */
    noDestructuredProps: noDestructuredPropsConfigurationSchema.optional().nullable(),
    /**
     * Restrict the number of lines of code in a function.
     */
    noExcessiveLinesPerFunction: noExcessiveLinesPerFunctionConfigurationSchema.optional().nullable(),
    /**
     * Require Promise-like statements to be handled appropriately.
     */
    noFloatingPromises: noFloatingPromisesConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of __dirname and __filename in the global scope.
     */
    noGlobalDirnameFilename: noGlobalDirnameFilenameConfigurationSchema.optional().nullable(),
    /**
     * Disallow shorthand type conversions.
     */
    noImplicitCoercion: noImplicitCoercionConfigurationSchema.optional().nullable(),
    /**
     * Prevent import cycles.
     */
    noImportCycles: noImportCyclesConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of the !important style.
     */
    noImportantStyles: noImportantStylesConfigurationSchema.optional().nullable(),
    /**
     * Reports usage of "magic numbers" — numbers used directly instead of being assigned to named constants.
     */
    noMagicNumbers: noMagicNumbersConfigurationSchema.optional().nullable(),
    /**
     * Disallow Promises to be used in places where they are almost certainly a mistake.
     */
    noMisusedPromises: noMisusedPromisesConfigurationSchema.optional().nullable(),
    /**
     * Disallows defining React components inside other components.
     */
    noNestedComponentDefinitions: noNestedComponentDefinitionsConfigurationSchema.optional().nullable(),
    /**
     * Disallow use event handlers on non-interactive elements.
     */
    noNoninteractiveElementInteractions: noNoninteractiveElementInteractionsConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of process global.
     */
    noProcessGlobal: noProcessGlobalConfigurationSchema.optional().nullable(),
    /**
     * Disallow assigning to React component props.
     */
    noReactPropAssign: noReactPropAssignConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of configured elements.
     */
    noRestrictedElements: noRestrictedElementsConfigurationSchema.optional().nullable(),
    /**
     * Disallow usage of sensitive data such as API keys and tokens.
     */
    noSecrets: noSecretsConfigurationSchema.optional().nullable(),
    /**
     * Disallow variable declarations from shadowing variables declared in the outer scope.
     */
    noShadow: noShadowConfigurationSchema.optional().nullable(),
    /**
     * Prevents the use of the TypeScript directive @ts-ignore.
     */
    noTsIgnore: noTsIgnoreConfigurationSchema.optional().nullable(),
    /**
     * Disallow let or var variables that are read but never assigned.
     */
    noUnassignedVariables: noUnassignedVariablesConfigurationSchema.optional().nullable(),
    /**
     * Disallow unknown at-rules.
     */
    noUnknownAtRule: noUnknownAtRuleConfigurationSchema.optional().nullable(),
    /**
     * Warn when importing non-existing exports.
     */
    noUnresolvedImports: noUnresolvedImportsConfigurationSchema.optional().nullable(),
    /**
     * Prevent duplicate polyfills from Polyfill.io.
     */
    noUnwantedPolyfillio: noUnwantedPolyfillioConfigurationSchema.optional().nullable(),
    /**
     * Disallow useless backreferences in regular expression literals that always match an empty string.
     */
    noUselessBackrefInRegex: noUselessBackrefInRegexConfigurationSchema.optional().nullable(),
    /**
     * Disallow unnecessary escapes in string literals.
     */
    noUselessEscapeInString: noUselessEscapeInStringConfigurationSchema.optional().nullable(),
    /**
     * Disallow the use of useless undefined.
     */
    noUselessUndefined: noUselessUndefinedConfigurationSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable(),
    /**
     * Enforce that getters and setters for the same property are adjacent in class and object definitions.
     */
    useAdjacentGetterSetter: useAdjacentGetterSetterConfigurationSchema.optional().nullable(),
    /**
     * Require the consistent declaration of object literals. Defaults to explicit definitions.
     */
    useConsistentObjectDefinition: useConsistentObjectDefinitionConfigurationSchema.optional().nullable(),
    /**
     * Use static Response methods instead of new Response() constructor when possible.
     */
    useConsistentResponse: useConsistentResponseConfigurationSchema.optional().nullable(),
    /**
     * Require switch-case statements to be exhaustive.
     */
    useExhaustiveSwitchCases: useExhaustiveSwitchCasesConfigurationSchema.optional().nullable(),
    /**
     * Enforce types in functions, methods, variables, and parameters.
     */
    useExplicitType: useExplicitTypeConfigurationSchema.optional().nullable(),
    /**
     * Require that all exports are declared after all non-export statements.
     */
    useExportsLast: useExportsLastConfigurationSchema.optional().nullable(),
    /**
     * Enforce using Solid's \<For /> component for mapping an array to JSX elements.
     */
    useForComponent: useForComponentConfigurationSchema.optional().nullable(),
    /**
     * Ensure the preconnect attribute is used when using Google Fonts.
     */
    useGoogleFontPreconnect: useGoogleFontPreconnectConfigurationSchema.optional().nullable(),
    /**
     * Prefer Array#{indexOf,lastIndexOf}() over Array#{findIndex,findLastIndex}() when looking for the index of an item.
     */
    useIndexOf: useIndexOfConfigurationSchema.optional().nullable(),
    /**
     * Enforce consistent return values in iterable callbacks.
     */
    useIterableCallbackReturn: useIterableCallbackReturnConfigurationSchema.optional().nullable(),
    /**
     * Enforces the use of with { type: "json" } for JSON module imports.
     */
    useJsonImportAttribute: useJsonImportAttributeConfigurationSchema.optional().nullable(),
    /**
     * Enforce specifying the name of GraphQL operations.
     */
    useNamedOperation: useNamedOperationConfigurationSchema.optional().nullable(),
    /**
     * Validates that all enum values are capitalized.
     */
    useNamingConvention: useNamingConventionConfigurationSchema.optional().nullable(),
    /**
     * Enforce the use of numeric separators in numeric literals.
     */
    useNumericSeparators: useNumericSeparatorsConfigurationSchema.optional().nullable(),
    /**
     * Prefer object spread over Object.assign() when constructing new objects.
     */
    useObjectSpread: useObjectSpreadConfigurationSchema.optional().nullable(),
    /**
     * Enforce the consistent use of the radix argument when using parseInt().
     */
    useParseIntRadix: useParseIntRadixConfigurationSchema.optional().nullable(),
    /**
     * Enforce marking members as readonly if they are never modified outside the constructor.
     */
    useReadonlyClassProperties: useReadonlyClassPropertiesConfigurationSchema.optional().nullable(),
    /**
     * Enforce JSDoc comment lines to start with a single asterisk, except for the first one.
     */
    useSingleJsDocAsterisk: useSingleJsDocAsteriskConfigurationSchema.optional().nullable(),
    /**
     * Enforce the sorting of CSS utility classes.
     */
    useSortedClasses: useSortedClassesConfigurationSchema.optional().nullable(),
    /**
     * Require a description parameter for the Symbol().
     */
    useSymbolDescription: useSymbolDescriptionConfigurationSchema.optional().nullable(),
    /**
     * Disallow overload signatures that can be unified into a single signature.
     */
    useUnifiedTypeSignature: useUnifiedTypeSignatureConfigurationSchema.optional().nullable(),
    /**
     * Prevent the usage of static string literal id attribute on elements.
     */
    useUniqueElementIds: useUniqueElementIdsConfigurationSchema.optional().nullable()
});

export const severityOrGroupForStyleSchema = z.union([groupPlainConfigurationSchema, styleSchema]);

export const organizeImportsOptionsSchema = z.object({
    groups: importGroupsSchema.optional()
});

export const severityOrGroupForNurserySchema = z.union([groupPlainConfigurationSchema, nurserySchema]);

export const rulesSchema = z.object({
    a11y: severityOrGroupForA11YSchema.optional().nullable(),
    complexity: severityOrGroupForComplexitySchema.optional().nullable(),
    correctness: severityOrGroupForCorrectnessSchema.optional().nullable(),
    nursery: severityOrGroupForNurserySchema.optional().nullable(),
    performance: severityOrGroupForPerformanceSchema.optional().nullable(),
    /**
     * It enables the lint rules recommended by Biome. `true` by default.
     */
    recommended: z.boolean().optional().nullable(),
    security: severityOrGroupForSecuritySchema.optional().nullable(),
    style: severityOrGroupForStyleSchema.optional().nullable(),
    suspicious: severityOrGroupForSuspiciousSchema.optional().nullable()
});

export const ruleAssistWithOptionsForOrganizeImportsOptionsSchema = z.object({
    /**
     * The severity of the emitted diagnostics by the rule
     */
    level: ruleAssistPlainConfigurationSchema,
    /**
     * Rule's options
     */
    options: organizeImportsOptionsSchema
});

export const linterConfigurationSchema = z.object({
    /**
     * An object where the keys are the names of the domains, and the values are `all`, `recommended`, or `none`.
     */
    domains: ruleDomainsSchema.optional().nullable(),
    /**
     * if `false`, it disables the feature and the linter won't be executed. `true` by default
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * A list of glob patterns. The analyzer will handle only those files/folders that will match these patterns.
     */
    includes: z.array(normalizedGlobSchema).optional().nullable(),
    /**
     * List of rules
     */
    rules: rulesSchema.optional().nullable()
});

export const ruleAssistConfigurationForOrganizeImportsOptionsSchema = z.union([ruleAssistPlainConfigurationSchema, ruleAssistWithOptionsForOrganizeImportsOptionsSchema]);

export const overrideLinterConfigurationSchema = z.object({
    /**
     * List of rules
     */
    domains: ruleDomainsSchema.optional().nullable(),
    /**
     * if `false`, it disables the feature and the linter won't be executed. `true` by default
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * List of rules
     */
    rules: rulesSchema.optional().nullable()
});

/**
 * A list of rules that belong to this group
 */
export const sourceSchema = z.object({
    /**
     * Provides a code action to sort the imports and exports in the file using a built-in or custom order.
     */
    organizeImports: ruleAssistConfigurationForOrganizeImportsOptionsSchema.optional().nullable(),
    /**
     * It enables the recommended rules for this group
     */
    recommended: z.boolean().optional().nullable(),
    /**
     * Enforce attribute sorting in JSX elements.
     */
    useSortedAttributes: ruleAssistConfigurationForUseSortedAttributesOptionsSchema.optional().nullable(),
    /**
     * Sorts the keys of a JSON object in natural order
     */
    useSortedKeys: ruleAssistConfigurationForUseSortedKeysOptionsSchema.optional().nullable(),
    /**
     * Enforce ordering of CSS properties and nested rules.
     */
    useSortedProperties: ruleAssistConfigurationForUseSortedPropertiesOptionsSchema.optional().nullable()
});

export const actionsSchema = z.object({
    /**
     * It enables the assist actions recommended by Biome. `true` by default.
     */
    recommended: z.boolean().optional().nullable(),
    source: sourceSchema.optional().nullable()
});

export const assistConfigurationSchema = z.object({
    /**
     * Whether Biome should fail in CLI if the assist were not applied to the code.
     */
    actions: actionsSchema.optional().nullable(),
    /**
     * Whether Biome should enable assist via LSP and CLI.
     */
    enabled: boolSchema.optional().nullable(),
    /**
     * A list of glob patterns. Biome will include files/folders that will match these patterns.
     */
    includes: z.array(normalizedGlobSchema).optional().nullable()
});

export const overrideAssistConfigurationSchema = z.object({
    /**
     * List of actions
     */
    actions: actionsSchema.optional().nullable(),
    /**
     * if `false`, it disables the feature and the assist won't be executed. `true` by default
     */
    enabled: boolSchema.optional().nullable()
});

export const overridePatternSchema = z.object({
    /**
     * Specific configuration for the Json language
     */
    assist: overrideAssistConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the CSS language
     */
    css: cssConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the filesystem
     */
    files: overrideFilesConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the Json language
     */
    formatter: overrideFormatterConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the Graphql language
     */
    graphql: graphqlConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the GritQL language
     */
    grit: gritConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the GritQL language
     */
    html: htmlConfigurationSchema.optional().nullable(),
    /**
     * A list of glob patterns. Biome will include files/folders that will match these patterns.
     */
    includes: overrideGlobsSchema.optional().nullable(),
    /**
     * Specific configuration for the JavaScript language
     */
    javascript: jsConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the Json language
     */
    json: jsonConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the Json language
     */
    linter: overrideLinterConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for additional plugins
     */
    plugins: pluginsSchema.optional().nullable()
});

export const overridesSchema = z.array(overridePatternSchema);

/**
 * The configuration that is contained inside the file `biome.json`
 */
export const configurationSchema = z.object({
    /**
     * A field for the [JSON schema](https://json-schema.org/) specification
     */
    $schema: schemaSchema.optional().nullable(),
    /**
     * Specific configuration for assists
     */
    assist: assistConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the Css language
     */
    css: cssConfigurationSchema.optional().nullable(),
    /**
     * A list of paths to other JSON files, used to extends the current configuration.
     */
    extends: extendsSchema.optional().nullable(),
    /**
     * The configuration of the filesystem
     */
    files: filesConfigurationSchema.optional().nullable(),
    /**
     * The configuration of the formatter
     */
    formatter: formatterConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the GraphQL language
     */
    graphql: graphqlConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the GraphQL language
     */
    grit: gritConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the HTML language
     */
    html: htmlConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the JavaScript language
     */
    javascript: jsConfigurationSchema.optional().nullable(),
    /**
     * Specific configuration for the Json language
     */
    json: jsonConfigurationSchema.optional().nullable(),
    /**
     * The configuration for the linter
     */
    linter: linterConfigurationSchema.optional().nullable(),
    /**
     * A list of granular patterns that should be applied only to a sub set of files
     */
    overrides: overridesSchema.optional().nullable(),
    /**
     * List of plugins to load.
     */
    plugins: pluginsSchema.optional().nullable(),
    /**
     * Indicates whether this configuration file is at the root of a Biome project. By default, this is `true`.
     */
    root: boolSchema.optional().nullable(),
    /**
     * The configuration of the VCS integration
     */
    vcs: vcsConfigurationSchema.optional().nullable()
});
